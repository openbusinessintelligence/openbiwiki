/* The following code was generated by JFlex 1.5.1 */

/*
 * This class provides the capability to slice and splice an article to
 * insert or remove a section of text.  In this case a "section" is
 * defined as a body of text between two heading tags of the same level,
 * such as two &lt;h2&gt; tags.
 */
package org.jamwiki.parser.jflex;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>jamwiki-spliceprocessor.jflex</tt>
 */
public class JAMWikiSpliceLexer extends AbstractJAMWikiSpliceLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PRE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\1\1\35\1\0\1\35\22\0\1\5\1\33\1\2"+
    "\4\0\1\3\5\0\1\34\1\0\1\13\1\0\1\12\1\14\1\15"+
    "\1\16\1\17\1\20\3\0\1\6\1\0\1\10\1\7\1\4\2\0"+
    "\4\6\1\32\2\6\1\11\1\25\1\6\1\27\2\6\1\21\1\22"+
    "\1\30\1\6\1\31\4\6\1\23\3\6\6\0\4\6\1\32\2\6"+
    "\1\11\1\25\1\6\1\27\2\6\1\21\1\22\1\30\1\6\1\31"+
    "\4\6\1\23\3\6\12\0\1\35\252\0\2\24\u1ef6\0\1\35\1\35"+
    "\u0100\0\1\26\uded5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\4\1\20\0\1\2\43\0\1\3\3\0\1\4"+
    "\23\0\1\4\4\0\1\5\40\0\1\6\62\0\1\6"+
    "\3\0\1\7\5\0\1\10\5\0\1\11\5\0\1\12"+
    "\5\0\1\13\5\0\1\14\7\0\1\3\2\0\1\3"+
    "\1\0\1\6\1\15\57\0\1\15\114\0\1\3\1\0"+
    "\1\15\1\16\144\0\1\15\1\16\5\0\1\7\1\0"+
    "\1\7\4\0\1\10\1\0\1\10\4\0\1\11\1\0"+
    "\1\11\4\0\1\12\1\0\1\12\4\0\1\13\1\0"+
    "\1\13\4\0\1\14\1\0\1\14\7\0\1\16\1\17"+
    "\45\0\1\16\1\17\3\0\2\7\3\0\2\10\3\0"+
    "\2\11\3\0\2\12\3\0\2\13\3\0\2\14\1\0"+
    "\1\16\1\17\1\0\2\7\1\0\2\10\1\0\2\11"+
    "\1\0\2\12\1\0\2\13\1\0\2\14\1\0\1\17"+
    "\6\0\1\20\1\17\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[610];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\170\0\226\0\264\0\322"+
    "\0\360\0\u010e\0\u012c\0\u014a\0\u0168\0\u0186\0\u01a4\0\u01c2"+
    "\0\u01e0\0\u01fe\0\u021c\0\u023a\0\u0258\0\u0276\0\u0294\0\132"+
    "\0\u02b2\0\u02d0\0\u02ee\0\u030c\0\u032a\0\u0348\0\u0366\0\u0384"+
    "\0\u03a2\0\u03c0\0\u03de\0\u03fc\0\u041a\0\u0438\0\u0456\0\u0474"+
    "\0\u0492\0\u04b0\0\u04ce\0\u04ec\0\u050a\0\u0528\0\u0546\0\u0564"+
    "\0\u0582\0\u05a0\0\u05be\0\u05dc\0\u05fa\0\u0618\0\u0636\0\u0654"+
    "\0\u0672\0\u0690\0\u06ae\0\132\0\u06cc\0\u06ea\0\u0708\0\u0726"+
    "\0\u0744\0\u0762\0\u0780\0\u079e\0\u07bc\0\u07da\0\u07f8\0\u0816"+
    "\0\u0834\0\u0852\0\u0870\0\u088e\0\u08ac\0\u08ca\0\u08e8\0\u0906"+
    "\0\u0924\0\u0942\0\u0960\0\132\0\u097e\0\u099c\0\u09ba\0\u09d8"+
    "\0\132\0\u09f6\0\u0a14\0\u0a32\0\u0a50\0\u0a6e\0\u0a8c\0\u0aaa"+
    "\0\u0ac8\0\u0ae6\0\u0b04\0\u0b22\0\u0b40\0\u0b5e\0\u0b7c\0\u0b9a"+
    "\0\u0bb8\0\u0bd6\0\u0bf4\0\u0c12\0\u0c30\0\u0c4e\0\u0c6c\0\u0c8a"+
    "\0\u0ca8\0\u0cc6\0\u0ce4\0\u0d02\0\u0d20\0\u0d3e\0\u0d5c\0\u0d7a"+
    "\0\u0d98\0\u0db6\0\u0dd4\0\u0df2\0\u0e10\0\u0e2e\0\u0e4c\0\u0e6a"+
    "\0\u0e88\0\u0ea6\0\u0ec4\0\u0ee2\0\u0f00\0\u0f1e\0\u0f3c\0\u0f5a"+
    "\0\u0f78\0\u0f96\0\u0fb4\0\u0fd2\0\u0ff0\0\u100e\0\u102c\0\u104a"+
    "\0\u1068\0\u1086\0\u10a4\0\u10c2\0\u10e0\0\u10fe\0\u111c\0\u113a"+
    "\0\u1158\0\u1176\0\u1194\0\u11b2\0\u11d0\0\u11ee\0\u120c\0\u122a"+
    "\0\u1248\0\u1266\0\u1284\0\u12a2\0\u12c0\0\u12de\0\u12fc\0\u131a"+
    "\0\u1338\0\u1356\0\u1374\0\u1392\0\u13b0\0\u13ce\0\u13ec\0\u140a"+
    "\0\132\0\u1428\0\u1446\0\u1464\0\u1482\0\u14a0\0\132\0\u14be"+
    "\0\u14dc\0\u14fa\0\u1518\0\u1536\0\132\0\u1554\0\u1572\0\u1590"+
    "\0\u15ae\0\u15cc\0\132\0\u15ea\0\u1608\0\u1626\0\u1644\0\u1662"+
    "\0\132\0\u1680\0\u169e\0\u16bc\0\u16da\0\u16f8\0\132\0\u1716"+
    "\0\u1734\0\u1752\0\u1770\0\u178e\0\u17ac\0\u17ca\0\u17ca\0\u17e8"+
    "\0\u1806\0\u1806\0\u1824\0\132\0\u1842\0\u1860\0\u187e\0\u189c"+
    "\0\u18ba\0\u18d8\0\u18f6\0\u1914\0\u1932\0\u1950\0\u196e\0\u198c"+
    "\0\u19aa\0\u19c8\0\u19e6\0\u1a04\0\u1a22\0\u1a40\0\u1a5e\0\u1a7c"+
    "\0\u1a9a\0\u1ab8\0\u1ad6\0\u1af4\0\u1b12\0\u1b30\0\u1b4e\0\u1b6c"+
    "\0\u1b8a\0\u1ba8\0\u1bc6\0\u1be4\0\u1c02\0\u1c20\0\u1c3e\0\u1c5c"+
    "\0\u1c7a\0\u1c98\0\u1cb6\0\u1cd4\0\u1cf2\0\u1d10\0\u1d2e\0\u1d4c"+
    "\0\u1d6a\0\u1d88\0\u1da6\0\u1dc4\0\u1de2\0\u1e00\0\u1e1e\0\u1e3c"+
    "\0\u1e5a\0\u1e78\0\u1e96\0\u1eb4\0\u1ed2\0\u1ef0\0\u1f0e\0\u1f2c"+
    "\0\u1f4a\0\u1f68\0\u1f86\0\u1fa4\0\u1fc2\0\u1fe0\0\u1ffe\0\u201c"+
    "\0\u203a\0\u2058\0\u2076\0\u2094\0\u20b2\0\u20d0\0\u20ee\0\u210c"+
    "\0\u212a\0\u2148\0\u2166\0\u2184\0\u21a2\0\u21c0\0\u21de\0\u21fc"+
    "\0\u221a\0\u2238\0\u2256\0\u2274\0\u2292\0\u22b0\0\u22ce\0\u22ec"+
    "\0\u230a\0\u2328\0\u2346\0\u2364\0\u2382\0\u23a0\0\u23be\0\u23dc"+
    "\0\u23fa\0\u2418\0\u2436\0\u2454\0\u2472\0\u2490\0\u24ae\0\u24cc"+
    "\0\u24ea\0\u2508\0\u2526\0\u2544\0\u2562\0\u2580\0\u259e\0\u25bc"+
    "\0\u25da\0\u25f8\0\u2616\0\u2634\0\u2652\0\u2670\0\u268e\0\u26ac"+
    "\0\u26ca\0\u26ca\0\u26e8\0\u2706\0\u2724\0\u2742\0\u2760\0\u277e"+
    "\0\u279c\0\u27ba\0\u27d8\0\u27f6\0\u2814\0\u2832\0\u2850\0\u286e"+
    "\0\u288c\0\u28aa\0\u28c8\0\u28e6\0\u2904\0\u2922\0\u2940\0\u295e"+
    "\0\u297c\0\u299a\0\u29b8\0\u29d6\0\u29f4\0\u2a12\0\u2a30\0\u2a4e"+
    "\0\u2a6c\0\u2a8a\0\u2aa8\0\u2ac6\0\u2ae4\0\u2b02\0\u2b20\0\u2b3e"+
    "\0\u2b5c\0\u2b7a\0\u2b98\0\u2bb6\0\u2bd4\0\u2bf2\0\u2c10\0\u2c2e"+
    "\0\u2c4c\0\u2c6a\0\u2c88\0\u2ca6\0\u2cc4\0\u2ce2\0\u2d00\0\u2d1e"+
    "\0\u2d3c\0\u2d5a\0\u2d78\0\u2d96\0\u2db4\0\u2dd2\0\u2df0\0\u2e0e"+
    "\0\u2e2c\0\u2e4a\0\u2e68\0\u2e86\0\u2ea4\0\u2ec2\0\u2ee0\0\u2efe"+
    "\0\u2f1c\0\u2f3a\0\u2f58\0\u2f76\0\u2f94\0\u2fb2\0\u2fd0\0\u2fee"+
    "\0\u300c\0\u302a\0\u3048\0\u3066\0\u3084\0\u30a2\0\u30c0\0\u30de"+
    "\0\u30fc\0\u311a\0\u3138\0\u3156\0\u3174\0\u3192\0\u31b0\0\u31ce"+
    "\0\u31ec\0\u320a\0\u3228\0\u3246\0\u3264\0\u3282\0\u32a0\0\u32be"+
    "\0\u32dc\0\132\0\u32fa\0\u3318\0\u3336\0\u3354\0\u3372\0\u3390"+
    "\0\u0e4c\0\u33ae\0\u0ea6\0\u33cc\0\u33ea\0\u3408\0\u3426\0\u0f1e"+
    "\0\u3444\0\u0f78\0\u3462\0\u3480\0\u349e\0\u34bc\0\u0ff0\0\u34da"+
    "\0\u104a\0\u34f8\0\u3516\0\u3534\0\u3552\0\u10c2\0\u3570\0\u111c"+
    "\0\u358e\0\u35ac\0\u35ca\0\u35e8\0\u1194\0\u3606\0\u11ee\0\u3624"+
    "\0\u3642\0\u3660\0\u367e\0\u1266\0\u369c\0\u12c0\0\u36ba\0\u36d8"+
    "\0\u36f6\0\u3714\0\u3732\0\u3750\0\u376e\0\u378c\0\u37aa\0\u37c8"+
    "\0\u37e6\0\u3804\0\u3822\0\u3840\0\u385e\0\u387c\0\u389a\0\u38b8"+
    "\0\u38d6\0\u38f4\0\u3912\0\u3930\0\u394e\0\u396c\0\u398a\0\u39a8"+
    "\0\u39c6\0\u39e4\0\u3a02\0\u3a20\0\u3a3e\0\u3a5c\0\u3a7a\0\u3a98"+
    "\0\u3ab6\0\u3ad4\0\u3af2\0\u3b10\0\u3b2e\0\u3b4c\0\u3b6a\0\u3b88"+
    "\0\u3ba6\0\u3bc4\0\u3be2\0\u3c00\0\u3c1e\0\u3c3c\0\u3c5a\0\u3c78"+
    "\0\u3c96\0\u030c\0\u18f6\0\u3cb4\0\u3cd2\0\u3cf0\0\u0348\0\u19c8"+
    "\0\u3d0e\0\u3d2c\0\u3d4a\0\u0384\0\u1a9a\0\u3d68\0\u3d86\0\u3da4"+
    "\0\u03c0\0\u1b6c\0\u3dc2\0\u3de0\0\u3dfe\0\u03fc\0\u1c3e\0\u3e1c"+
    "\0\u3e3a\0\u3e58\0\u0438\0\u1d10\0\u3e76\0\132\0\u3e94\0\u3eb2"+
    "\0\u0e6a\0\u0ec4\0\u3ed0\0\u0f3c\0\u0f96\0\u3eee\0\u100e\0\u1068"+
    "\0\u3f0c\0\u10e0\0\u113a\0\u3f2a\0\u11b2\0\u120c\0\u3f48\0\u1284"+
    "\0\u12de\0\u3f66\0\u3f84\0\u3fa2\0\u3fc0\0\u3fde\0\u3ffc\0\u401a"+
    "\0\u4038\0\132\0\u4056\0\u1914\0\u19e6\0\u1ab8\0\u1b8a\0\u1c5c"+
    "\0\u1d2e\0\132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[610];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\10\4\1\5\24\4\1\0\7\4\1\6\1\5\24\4"+
    "\1\0\10\4\1\7\24\4\50\0\1\10\7\0\1\11"+
    "\6\0\1\12\2\0\1\13\2\0\1\14\1\0\5\14"+
    "\1\15\26\14\13\0\1\16\5\0\1\11\26\0\1\17"+
    "\1\0\1\20\1\21\1\22\1\23\1\24\37\0\1\25"+
    "\44\0\1\26\40\0\1\27\1\0\7\14\1\30\26\14"+
    "\1\31\1\0\5\31\1\32\26\31\30\0\1\33\11\0"+
    "\1\34\1\35\34\0\1\36\1\37\34\0\1\40\1\41"+
    "\34\0\1\42\1\43\34\0\1\44\1\45\34\0\1\46"+
    "\1\47\53\0\1\50\44\0\1\51\37\0\1\52\1\0"+
    "\7\31\1\53\26\31\1\54\1\0\5\54\1\55\26\54"+
    "\31\0\1\56\4\0\10\34\1\57\25\34\4\0\1\34"+
    "\1\35\1\60\2\0\1\60\7\0\3\60\1\0\1\60"+
    "\1\0\4\60\3\0\10\36\1\61\25\36\4\0\1\36"+
    "\1\37\1\62\2\0\1\62\7\0\3\62\1\0\1\62"+
    "\1\0\4\62\3\0\10\40\1\63\25\40\4\0\1\40"+
    "\1\41\1\64\2\0\1\64\7\0\3\64\1\0\1\64"+
    "\1\0\4\64\3\0\10\42\1\65\25\42\4\0\1\42"+
    "\1\43\1\66\2\0\1\66\7\0\3\66\1\0\1\66"+
    "\1\0\4\66\3\0\10\44\1\67\25\44\4\0\1\44"+
    "\1\45\1\70\2\0\1\70\7\0\3\70\1\0\1\70"+
    "\1\0\4\70\3\0\10\46\1\71\25\46\4\0\1\46"+
    "\1\47\1\72\2\0\1\72\7\0\3\72\1\0\1\72"+
    "\1\0\4\72\27\0\2\73\14\0\1\74\1\75\5\0"+
    "\1\76\22\0\34\52\1\77\1\52\7\31\1\100\26\31"+
    "\7\54\1\101\26\54\1\102\1\0\5\102\1\103\26\102"+
    "\32\0\1\104\3\0\10\34\1\57\2\34\1\105\22\34"+
    "\4\0\1\34\2\60\1\106\1\0\1\60\7\0\3\60"+
    "\1\0\1\60\1\0\4\60\3\0\10\36\1\61\2\36"+
    "\1\107\22\36\4\0\1\36\2\62\1\110\1\0\1\62"+
    "\7\0\3\62\1\0\1\62\1\0\4\62\3\0\10\40"+
    "\1\63\2\40\1\111\22\40\4\0\1\40\2\64\1\112"+
    "\1\0\1\64\7\0\3\64\1\0\1\64\1\0\4\64"+
    "\3\0\10\42\1\65\2\42\1\113\22\42\4\0\1\42"+
    "\2\66\1\114\1\0\1\66\7\0\3\66\1\0\1\66"+
    "\1\0\4\66\3\0\10\44\1\67\2\44\1\115\22\44"+
    "\4\0\1\44\2\70\1\116\1\0\1\70\7\0\3\70"+
    "\1\0\1\70\1\0\4\70\3\0\10\46\1\71\2\46"+
    "\1\117\22\46\4\0\1\46\2\72\1\120\1\0\1\72"+
    "\7\0\3\72\1\0\1\72\1\0\4\72\31\0\2\121"+
    "\12\0\1\74\1\75\1\122\2\0\1\122\1\0\1\76"+
    "\5\0\3\122\1\0\1\122\1\0\4\122\7\0\1\74"+
    "\31\0\34\52\1\123\1\52\7\0\1\124\26\0\7\54"+
    "\1\125\26\54\7\102\1\126\26\102\1\127\1\0\5\127"+
    "\1\130\26\127\4\0\1\131\31\0\10\34\1\57\1\132"+
    "\24\34\1\133\1\0\1\134\1\135\1\0\1\136\30\133"+
    "\10\36\1\61\1\137\24\36\1\140\1\0\1\141\1\142"+
    "\1\0\1\143\30\140\10\40\1\63\1\144\24\40\1\145"+
    "\1\0\1\146\1\147\1\0\1\150\30\145\10\42\1\65"+
    "\1\151\24\42\1\152\1\0\1\153\1\154\1\0\1\155"+
    "\30\152\10\44\1\67\1\156\24\44\1\157\1\0\1\160"+
    "\1\161\1\0\1\162\30\157\10\46\1\71\1\163\24\46"+
    "\1\164\1\0\1\165\1\166\1\0\1\167\30\164\24\0"+
    "\2\170\14\0\1\74\2\122\1\171\1\0\1\122\1\0"+
    "\1\76\5\0\3\122\1\0\1\122\1\0\4\122\3\0"+
    "\4\52\1\4\27\52\1\123\1\52\7\54\1\172\26\54"+
    "\7\102\1\173\26\102\7\127\1\174\26\127\1\175\1\0"+
    "\5\175\1\0\26\175\10\34\1\57\1\34\1\176\23\34"+
    "\1\133\1\0\2\133\1\34\2\133\1\136\26\133\1\134"+
    "\1\177\1\133\1\134\1\200\2\134\1\201\26\134\1\135"+
    "\1\202\1\135\1\133\1\203\2\135\1\204\26\135\1\133"+
    "\1\0\1\134\1\135\1\34\1\136\1\133\1\136\26\133"+
    "\10\36\1\61\3\36\1\205\21\36\1\140\1\0\2\140"+
    "\1\36\2\140\1\143\26\140\1\141\1\206\1\140\1\141"+
    "\1\207\2\141\1\210\26\141\1\142\1\211\1\142\1\140"+
    "\1\212\2\142\1\213\26\142\1\140\1\0\1\141\1\142"+
    "\1\36\1\143\1\140\1\143\26\140\10\40\1\63\4\40"+
    "\1\214\20\40\1\145\1\0\2\145\1\40\2\145\1\150"+
    "\26\145\1\146\1\215\1\145\1\146\1\216\2\146\1\217"+
    "\26\146\1\147\1\220\1\147\1\145\1\221\2\147\1\222"+
    "\26\147\1\145\1\0\1\146\1\147\1\40\1\150\1\145"+
    "\1\150\26\145\10\42\1\65\5\42\1\223\17\42\1\152"+
    "\1\0\2\152\1\42\2\152\1\155\26\152\1\153\1\224"+
    "\1\152\1\153\1\225\2\153\1\226\26\153\1\154\1\227"+
    "\1\154\1\152\1\230\2\154\1\231\26\154\1\152\1\0"+
    "\1\153\1\154\1\42\1\155\1\152\1\155\26\152\10\44"+
    "\1\67\6\44\1\232\16\44\1\157\1\0\2\157\1\44"+
    "\2\157\1\162\26\157\1\160\1\233\1\157\1\160\1\234"+
    "\2\160\1\235\26\160\1\161\1\236\1\161\1\157\1\237"+
    "\2\161\1\240\26\161\1\157\1\0\1\160\1\161\1\44"+
    "\1\162\1\157\1\162\26\157\10\46\1\71\7\46\1\241"+
    "\15\46\1\164\1\0\2\164\1\46\2\164\1\167\26\164"+
    "\1\165\1\242\1\164\1\165\1\243\2\165\1\244\26\165"+
    "\1\166\1\245\1\166\1\164\1\246\2\166\1\247\26\166"+
    "\1\164\1\0\1\165\1\166\1\46\1\167\1\164\1\167"+
    "\26\164\4\0\1\250\31\0\1\251\1\0\1\252\1\253"+
    "\1\0\1\254\30\251\7\0\1\255\26\0\7\102\1\256"+
    "\26\102\7\127\1\257\26\127\7\175\1\260\26\175\4\34"+
    "\1\261\3\34\1\57\25\34\2\177\1\262\33\177\2\200"+
    "\1\263\5\200\1\264\25\200\1\134\1\177\1\134\1\265"+
    "\1\200\1\201\1\134\1\201\26\134\3\202\1\262\32\202"+
    "\3\203\1\263\4\203\1\266\25\203\1\135\1\202\1\265"+
    "\1\135\1\203\1\204\1\135\1\204\26\135\4\36\1\267"+
    "\3\36\1\61\25\36\2\206\1\270\33\206\2\207\1\271"+
    "\5\207\1\272\25\207\1\141\1\206\1\141\1\273\1\207"+
    "\1\210\1\141\1\210\26\141\3\211\1\270\32\211\3\212"+
    "\1\271\4\212\1\274\25\212\1\142\1\211\1\273\1\142"+
    "\1\212\1\213\1\142\1\213\26\142\4\40\1\275\3\40"+
    "\1\63\25\40\2\215\1\276\33\215\2\216\1\277\5\216"+
    "\1\300\25\216\1\146\1\215\1\146\1\301\1\216\1\217"+
    "\1\146\1\217\26\146\3\220\1\276\32\220\3\221\1\277"+
    "\4\221\1\302\25\221\1\147\1\220\1\301\1\147\1\221"+
    "\1\222\1\147\1\222\26\147\4\42\1\303\3\42\1\65"+
    "\25\42\2\224\1\304\33\224\2\225\1\305\5\225\1\306"+
    "\25\225\1\153\1\224\1\153\1\307\1\225\1\226\1\153"+
    "\1\226\26\153\3\227\1\304\32\227\3\230\1\305\4\230"+
    "\1\310\25\230\1\154\1\227\1\307\1\154\1\230\1\231"+
    "\1\154\1\231\26\154\4\44\1\311\3\44\1\67\25\44"+
    "\2\233\1\312\33\233\2\234\1\313\5\234\1\314\25\234"+
    "\1\160\1\233\1\160\1\315\1\234\1\235\1\160\1\235"+
    "\26\160\3\236\1\312\32\236\3\237\1\313\4\237\1\316"+
    "\25\237\1\161\1\236\1\315\1\161\1\237\1\240\1\161"+
    "\1\240\26\161\4\46\1\317\3\46\1\71\25\46\2\242"+
    "\1\320\33\242\2\243\1\321\5\243\1\322\25\243\1\165"+
    "\1\242\1\165\1\323\1\243\1\244\1\165\1\244\26\165"+
    "\3\245\1\320\32\245\3\246\1\321\4\246\1\324\25\246"+
    "\1\166\1\245\1\323\1\166\1\246\1\247\1\166\1\247"+
    "\26\166\10\250\1\325\25\250\1\251\1\0\2\251\1\74"+
    "\2\251\1\254\26\251\1\252\1\326\1\251\1\252\1\327"+
    "\2\252\1\330\26\252\1\253\1\331\1\253\1\251\1\332"+
    "\2\253\1\333\26\253\1\251\1\0\1\252\1\253\1\74"+
    "\1\254\1\251\1\254\26\251\7\0\1\334\26\0\7\102"+
    "\1\335\26\102\7\127\1\336\26\127\7\175\1\337\26\175"+
    "\4\0\1\34\1\60\1\0\1\106\26\0\5\34\1\340"+
    "\1\34\1\341\1\57\25\34\2\200\1\263\5\200\1\264"+
    "\2\200\1\342\22\200\1\265\1\343\1\135\1\134\1\344"+
    "\2\265\1\345\26\265\3\203\1\263\4\203\1\266\2\203"+
    "\1\346\22\203\4\0\1\36\1\62\1\0\1\110\26\0"+
    "\5\36\1\347\1\36\1\350\1\61\25\36\2\207\1\271"+
    "\5\207\1\272\2\207\1\351\22\207\1\273\1\352\1\142"+
    "\1\141\1\353\2\273\1\354\26\273\3\212\1\271\4\212"+
    "\1\274\2\212\1\355\22\212\4\0\1\40\1\64\1\0"+
    "\1\112\26\0\5\40\1\356\1\40\1\357\1\63\25\40"+
    "\2\216\1\277\5\216\1\300\2\216\1\360\22\216\1\301"+
    "\1\361\1\147\1\146\1\362\2\301\1\363\26\301\3\221"+
    "\1\277\4\221\1\302\2\221\1\364\22\221\4\0\1\42"+
    "\1\66\1\0\1\114\26\0\5\42\1\365\1\42\1\366"+
    "\1\65\25\42\2\225\1\305\5\225\1\306\2\225\1\367"+
    "\22\225\1\307\1\370\1\154\1\153\1\371\2\307\1\372"+
    "\26\307\3\230\1\305\4\230\1\310\2\230\1\373\22\230"+
    "\4\0\1\44\1\70\1\0\1\116\26\0\5\44\1\374"+
    "\1\44\1\375\1\67\25\44\2\234\1\313\5\234\1\314"+
    "\2\234\1\376\22\234\1\315\1\377\1\161\1\160\1\u0100"+
    "\2\315\1\u0101\26\315\3\237\1\313\4\237\1\316\2\237"+
    "\1\u0102\22\237\4\0\1\46\1\72\1\0\1\120\26\0"+
    "\5\46\1\u0103\1\46\1\u0104\1\71\25\46\2\243\1\321"+
    "\5\243\1\322\2\243\1\u0105\22\243\1\323\1\u0106\1\166"+
    "\1\165\1\u0107\2\323\1\u0108\26\323\3\246\1\321\4\246"+
    "\1\324\2\246\1\u0109\22\246\10\250\1\325\2\250\1\u010a"+
    "\22\250\2\326\1\u010b\33\326\1\252\1\326\1\252\1\u010c"+
    "\1\327\1\330\1\252\1\330\26\252\3\331\1\u010b\32\331"+
    "\1\253\1\331\1\u010c\1\253\1\332\1\333\1\253\1\333"+
    "\26\253\7\0\1\u010d\26\0\7\127\1\u010e\26\127\7\175"+
    "\1\u010f\26\175\5\34\2\340\1\341\1\57\1\340\7\34"+
    "\3\340\1\34\1\340\1\34\4\340\3\34\1\u0110\1\34"+
    "\1\u0111\1\u0112\1\34\1\u0113\2\u0110\1\u0114\25\u0110\2\200"+
    "\1\263\5\200\1\264\1\u0115\24\200\2\343\1\u0116\1\u0117"+
    "\32\343\2\344\1\u0118\1\u0119\4\344\1\u011a\25\344\1\265"+
    "\1\343\2\265\1\344\1\345\1\265\1\345\26\265\3\203"+
    "\1\263\4\203\1\266\1\u011b\24\203\5\36\2\347\1\350"+
    "\1\61\1\347\7\36\3\347\1\36\1\347\1\36\4\347"+
    "\3\36\1\u011c\1\36\1\u011d\1\u011e\1\36\1\u011f\2\u011c"+
    "\1\u0120\25\u011c\2\207\1\271\5\207\1\272\1\u0121\24\207"+
    "\2\352\1\u0122\1\u0123\32\352\2\353\1\u0124\1\u0125\4\353"+
    "\1\u0126\25\353\1\273\1\352\2\273\1\353\1\354\1\273"+
    "\1\354\26\273\3\212\1\271\4\212\1\274\1\u0127\24\212"+
    "\5\40\2\356\1\357\1\63\1\356\7\40\3\356\1\40"+
    "\1\356\1\40\4\356\3\40\1\u0128\1\40\1\u0129\1\u012a"+
    "\1\40\1\u012b\2\u0128\1\u012c\25\u0128\2\216\1\277\5\216"+
    "\1\300\1\u012d\24\216\2\361\1\u012e\1\u012f\32\361\2\362"+
    "\1\u0130\1\u0131\4\362\1\u0132\25\362\1\301\1\361\2\301"+
    "\1\362\1\363\1\301\1\363\26\301\3\221\1\277\4\221"+
    "\1\302\1\u0133\24\221\5\42\2\365\1\366\1\65\1\365"+
    "\7\42\3\365\1\42\1\365\1\42\4\365\3\42\1\u0134"+
    "\1\42\1\u0135\1\u0136\1\42\1\u0137\2\u0134\1\u0138\25\u0134"+
    "\2\225\1\305\5\225\1\306\1\u0139\24\225\2\370\1\u013a"+
    "\1\u013b\32\370\2\371\1\u013c\1\u013d\4\371\1\u013e\25\371"+
    "\1\307\1\370\2\307\1\371\1\372\1\307\1\372\26\307"+
    "\3\230\1\305\4\230\1\310\1\u013f\24\230\5\44\2\374"+
    "\1\375\1\67\1\374\7\44\3\374\1\44\1\374\1\44"+
    "\4\374\3\44\1\u0140\1\44\1\u0141\1\u0142\1\44\1\u0143"+
    "\2\u0140\1\u0144\25\u0140\2\234\1\313\5\234\1\314\1\u0145"+
    "\24\234\2\377\1\u0146\1\u0147\32\377\2\u0100\1\u0148\1\u0149"+
    "\4\u0100\1\u014a\25\u0100\1\315\1\377\2\315\1\u0100\1\u0101"+
    "\1\315\1\u0101\26\315\3\237\1\313\4\237\1\316\1\u014b"+
    "\24\237\5\46\2\u0103\1\u0104\1\71\1\u0103\7\46\3\u0103"+
    "\1\46\1\u0103\1\46\4\u0103\3\46\1\u014c\1\46\1\u014d"+
    "\1\u014e\1\46\1\u014f\2\u014c\1\u0150\25\u014c\2\243\1\321"+
    "\5\243\1\322\1\u0151\24\243\2\u0106\1\u0152\1\u0153\32\u0106"+
    "\2\u0107\1\u0154\1\u0155\4\u0107\1\u0156\25\u0107\1\323\1\u0106"+
    "\2\323\1\u0107\1\u0108\1\323\1\u0108\26\323\3\246\1\321"+
    "\4\246\1\324\1\u0157\24\246\10\250\1\325\10\250\1\u0158"+
    "\14\250\4\0\1\74\1\122\1\0\1\171\3\0\1\76"+
    "\22\0\1\u010c\1\u0159\1\253\1\252\1\u015a\2\u010c\1\u015b"+
    "\26\u010c\7\0\1\u015c\26\0\7\127\1\u015d\26\127\7\175"+
    "\1\u015e\26\175\1\u0110\1\34\2\u0110\1\34\2\u0110\1\u0113"+
    "\1\u0114\25\u0110\1\u0111\1\200\1\u0110\1\u0111\1\200\2\u0111"+
    "\1\u015f\1\u0160\25\u0111\1\u0112\1\203\1\u0112\1\u0110\1\203"+
    "\2\u0112\1\u0161\1\u0162\25\u0112\1\u0110\1\34\1\u0111\1\u0112"+
    "\1\34\1\u0113\1\u0110\1\u0113\1\u0114\26\u0110\1\34\2\u0110"+
    "\1\34\2\u0110\1\u0113\1\u0114\2\u0110\1\u0163\22\u0110\2\200"+
    "\1\263\5\200\1\264\1\200\1\u0164\23\200\3\202\1\262"+
    "\1\203\1\u0165\1\202\1\u0166\26\202\2\177\1\262\1\177"+
    "\1\200\1\u0167\1\177\1\u0168\26\177\3\203\1\263\1\203"+
    "\1\u0169\1\203\1\u016a\1\266\25\203\2\200\1\263\2\200"+
    "\1\u016b\1\200\1\u016c\1\264\25\200\2\344\1\u0118\1\u0119"+
    "\4\344\1\u011a\2\344\1\u016d\22\344\3\203\1\263\4\203"+
    "\1\266\1\203\1\u016e\23\203\1\u011c\1\36\2\u011c\1\36"+
    "\2\u011c\1\u011f\1\u0120\25\u011c\1\u011d\1\207\1\u011c\1\u011d"+
    "\1\207\2\u011d\1\u016f\1\u0170\25\u011d\1\u011e\1\212\1\u011e"+
    "\1\u011c\1\212\2\u011e\1\u0171\1\u0172\25\u011e\1\u011c\1\36"+
    "\1\u011d\1\u011e\1\36\1\u011f\1\u011c\1\u011f\1\u0120\26\u011c"+
    "\1\36\2\u011c\1\36\2\u011c\1\u011f\1\u0120\2\u011c\1\u0173"+
    "\22\u011c\2\207\1\271\5\207\1\272\3\207\1\u0174\21\207"+
    "\3\211\1\270\1\212\1\u0175\1\211\1\u0176\26\211\2\206"+
    "\1\270\1\206\1\207\1\u0177\1\206\1\u0178\26\206\3\212"+
    "\1\271\1\212\1\u0179\1\212\1\u017a\1\274\25\212\2\207"+
    "\1\271\2\207\1\u017b\1\207\1\u017c\1\272\25\207\2\353"+
    "\1\u0124\1\u0125\4\353\1\u0126\2\353\1\u017d\22\353\3\212"+
    "\1\271\4\212\1\274\3\212\1\u017e\21\212\1\u0128\1\40"+
    "\2\u0128\1\40\2\u0128\1\u012b\1\u012c\25\u0128\1\u0129\1\216"+
    "\1\u0128\1\u0129\1\216\2\u0129\1\u017f\1\u0180\25\u0129\1\u012a"+
    "\1\221\1\u012a\1\u0128\1\221\2\u012a\1\u0181\1\u0182\25\u012a"+
    "\1\u0128\1\40\1\u0129\1\u012a\1\40\1\u012b\1\u0128\1\u012b"+
    "\1\u012c\26\u0128\1\40\2\u0128\1\40\2\u0128\1\u012b\1\u012c"+
    "\2\u0128\1\u0183\22\u0128\2\216\1\277\5\216\1\300\4\216"+
    "\1\u0184\20\216\3\220\1\276\1\221\1\u0185\1\220\1\u0186"+
    "\26\220\2\215\1\276\1\215\1\216\1\u0187\1\215\1\u0188"+
    "\26\215\3\221\1\277\1\221\1\u0189\1\221\1\u018a\1\302"+
    "\25\221\2\216\1\277\2\216\1\u018b\1\216\1\u018c\1\300"+
    "\25\216\2\362\1\u0130\1\u0131\4\362\1\u0132\2\362\1\u018d"+
    "\22\362\3\221\1\277\4\221\1\302\4\221\1\u018e\20\221"+
    "\1\u0134\1\42\2\u0134\1\42\2\u0134\1\u0137\1\u0138\25\u0134"+
    "\1\u0135\1\225\1\u0134\1\u0135\1\225\2\u0135\1\u018f\1\u0190"+
    "\25\u0135\1\u0136\1\230\1\u0136\1\u0134\1\230\2\u0136\1\u0191"+
    "\1\u0192\25\u0136\1\u0134\1\42\1\u0135\1\u0136\1\42\1\u0137"+
    "\1\u0134\1\u0137\1\u0138\26\u0134\1\42\2\u0134\1\42\2\u0134"+
    "\1\u0137\1\u0138\2\u0134\1\u0193\22\u0134\2\225\1\305\5\225"+
    "\1\306\5\225\1\u0194\17\225\3\227\1\304\1\230\1\u0195"+
    "\1\227\1\u0196\26\227\2\224\1\304\1\224\1\225\1\u0197"+
    "\1\224\1\u0198\26\224\3\230\1\305\1\230\1\u0199\1\230"+
    "\1\u019a\1\310\25\230\2\225\1\305\2\225\1\u019b\1\225"+
    "\1\u019c\1\306\25\225\2\371\1\u013c\1\u013d\4\371\1\u013e"+
    "\2\371\1\u019d\22\371\3\230\1\305\4\230\1\310\5\230"+
    "\1\u019e\17\230\1\u0140\1\44\2\u0140\1\44\2\u0140\1\u0143"+
    "\1\u0144\25\u0140\1\u0141\1\234\1\u0140\1\u0141\1\234\2\u0141"+
    "\1\u019f\1\u01a0\25\u0141\1\u0142\1\237\1\u0142\1\u0140\1\237"+
    "\2\u0142\1\u01a1\1\u01a2\25\u0142\1\u0140\1\44\1\u0141\1\u0142"+
    "\1\44\1\u0143\1\u0140\1\u0143\1\u0144\26\u0140\1\44\2\u0140"+
    "\1\44\2\u0140\1\u0143\1\u0144\2\u0140\1\u01a3\22\u0140\2\234"+
    "\1\313\5\234\1\314\6\234\1\u01a4\16\234\3\236\1\312"+
    "\1\237\1\u01a5\1\236\1\u01a6\26\236\2\233\1\312\1\233"+
    "\1\234\1\u01a7\1\233\1\u01a8\26\233\3\237\1\313\1\237"+
    "\1\u01a9\1\237\1\u01aa\1\316\25\237\2\234\1\313\2\234"+
    "\1\u01ab\1\234\1\u01ac\1\314\25\234\2\u0100\1\u0148\1\u0149"+
    "\4\u0100\1\u014a\2\u0100\1\u01ad\22\u0100\3\237\1\313\4\237"+
    "\1\316\6\237\1\u01ae\16\237\1\u014c\1\46\2\u014c\1\46"+
    "\2\u014c\1\u014f\1\u0150\25\u014c\1\u014d\1\243\1\u014c\1\u014d"+
    "\1\243\2\u014d\1\u01af\1\u01b0\25\u014d\1\u014e\1\246\1\u014e"+
    "\1\u014c\1\246\2\u014e\1\u01b1\1\u01b2\25\u014e\1\u014c\1\46"+
    "\1\u014d\1\u014e\1\46\1\u014f\1\u014c\1\u014f\1\u0150\26\u014c"+
    "\1\46\2\u014c\1\46\2\u014c\1\u014f\1\u0150\2\u014c\1\u01b3"+
    "\22\u014c\2\243\1\321\5\243\1\322\7\243\1\u01b4\15\243"+
    "\3\245\1\320\1\246\1\u01b5\1\245\1\u01b6\26\245\2\242"+
    "\1\320\1\242\1\243\1\u01b7\1\242\1\u01b8\26\242\3\246"+
    "\1\321\1\246\1\u01b9\1\246\1\u01ba\1\324\25\246\2\243"+
    "\1\321\2\243\1\u01bb\1\243\1\u01bc\1\322\25\243\2\u0107"+
    "\1\u0154\1\u0155\4\u0107\1\u0156\2\u0107\1\u01bd\22\u0107\3\246"+
    "\1\321\4\246\1\324\7\246\1\u01be\15\246\10\250\1\325"+
    "\11\250\1\u01bf\13\250\2\u0159\1\u01c0\1\u01c1\32\u0159\1\u010c"+
    "\1\u0159\2\u010c\1\u015a\1\u015b\1\u010c\1\u015b\26\u010c\7\0"+
    "\1\u01c2\35\0\1\u01c3\26\0\7\175\1\u01c4\26\175\1\u0111"+
    "\1\200\1\u0111\1\u01c5\1\200\1\u015f\1\u0111\1\u015f\1\u0160"+
    "\26\u0111\1\200\1\u0110\1\u0111\1\200\2\u0111\1\u015f\1\u0160"+
    "\2\u0111\1\u01c6\22\u0111\1\u0112\1\203\1\u01c5\1\u0112\1\203"+
    "\1\u0161\1\u0112\1\u0161\1\u0162\26\u0112\1\203\1\u0112\1\u0110"+
    "\1\203\2\u0112\1\u0161\1\u0162\2\u0112\1\u01c7\22\u0112\1\u0110"+
    "\1\34\2\u0110\1\34\2\u0110\1\u0113\1\u0114\1\u01c8\24\u0110"+
    "\2\200\1\263\1\200\1\u01c9\3\200\1\264\25\200\3\202"+
    "\1\262\1\203\2\u0165\1\u0166\1\202\1\u0165\7\202\3\u0165"+
    "\1\202\1\u0165\1\202\4\u0165\3\202\1\135\1\202\1\265"+
    "\1\135\1\202\1\204\30\135\2\177\1\262\1\177\1\200"+
    "\2\u0167\1\u0168\1\177\1\u0167\7\177\3\u0167\1\177\1\u0167"+
    "\1\177\4\u0167\3\177\1\134\1\177\1\134\1\265\1\177"+
    "\1\201\30\134\3\203\1\263\1\203\2\u0169\1\u016a\1\266"+
    "\1\u0169\7\203\3\u0169\1\203\1\u0169\1\203\4\u0169\3\203"+
    "\1\u0112\1\203\1\u01c5\1\u0112\1\203\1\u0161\2\u0112\1\u0162"+
    "\25\u0112\2\200\1\263\2\200\2\u016b\1\u016c\1\264\1\u016b"+
    "\7\200\3\u016b\1\200\1\u016b\1\200\4\u016b\3\200\1\u0111"+
    "\1\200\1\u0111\1\u01c5\1\200\1\u015f\2\u0111\1\u0160\25\u0111"+
    "\2\344\1\u0118\1\u0119\4\344\1\u011a\1\u01ca\24\344\3\203"+
    "\1\263\1\u01cb\3\203\1\266\25\203\1\u011d\1\207\1\u011d"+
    "\1\u01cc\1\207\1\u016f\1\u011d\1\u016f\1\u0170\26\u011d\1\207"+
    "\1\u011c\1\u011d\1\207\2\u011d\1\u016f\1\u0170\2\u011d\1\u01cd"+
    "\22\u011d\1\u011e\1\212\1\u01cc\1\u011e\1\212\1\u0171\1\u011e"+
    "\1\u0171\1\u0172\26\u011e\1\212\1\u011e\1\u011c\1\212\2\u011e"+
    "\1\u0171\1\u0172\2\u011e\1\u01ce\22\u011e\1\u011c\1\36\2\u011c"+
    "\1\36\2\u011c\1\u011f\1\u0120\1\u01cf\24\u011c\2\207\1\271"+
    "\1\207\1\u01d0\3\207\1\272\25\207\3\211\1\270\1\212"+
    "\2\u0175\1\u0176\1\211\1\u0175\7\211\3\u0175\1\211\1\u0175"+
    "\1\211\4\u0175\3\211\1\142\1\211\1\273\1\142\1\211"+
    "\1\213\30\142\2\206\1\270\1\206\1\207\2\u0177\1\u0178"+
    "\1\206\1\u0177\7\206\3\u0177\1\206\1\u0177\1\206\4\u0177"+
    "\3\206\1\141\1\206\1\141\1\273\1\206\1\210\30\141"+
    "\3\212\1\271\1\212\2\u0179\1\u017a\1\274\1\u0179\7\212"+
    "\3\u0179\1\212\1\u0179\1\212\4\u0179\3\212\1\u011e\1\212"+
    "\1\u01cc\1\u011e\1\212\1\u0171\2\u011e\1\u0172\25\u011e\2\207"+
    "\1\271\2\207\2\u017b\1\u017c\1\272\1\u017b\7\207\3\u017b"+
    "\1\207\1\u017b\1\207\4\u017b\3\207\1\u011d\1\207\1\u011d"+
    "\1\u01cc\1\207\1\u016f\2\u011d\1\u0170\25\u011d\2\353\1\u0124"+
    "\1\u0125\4\353\1\u0126\1\u01d1\24\353\3\212\1\271\1\u01d2"+
    "\3\212\1\274\25\212\1\u0129\1\216\1\u0129\1\u01d3\1\216"+
    "\1\u017f\1\u0129\1\u017f\1\u0180\26\u0129\1\216\1\u0128\1\u0129"+
    "\1\216\2\u0129\1\u017f\1\u0180\2\u0129\1\u01d4\22\u0129\1\u012a"+
    "\1\221\1\u01d3\1\u012a\1\221\1\u0181\1\u012a\1\u0181\1\u0182"+
    "\26\u012a\1\221\1\u012a\1\u0128\1\221\2\u012a\1\u0181\1\u0182"+
    "\2\u012a\1\u01d5\22\u012a\1\u0128\1\40\2\u0128\1\40\2\u0128"+
    "\1\u012b\1\u012c\1\u01d6\24\u0128\2\216\1\277\1\216\1\u01d7"+
    "\3\216\1\300\25\216\3\220\1\276\1\221\2\u0185\1\u0186"+
    "\1\220\1\u0185\7\220\3\u0185\1\220\1\u0185\1\220\4\u0185"+
    "\3\220\1\147\1\220\1\301\1\147\1\220\1\222\30\147"+
    "\2\215\1\276\1\215\1\216\2\u0187\1\u0188\1\215\1\u0187"+
    "\7\215\3\u0187\1\215\1\u0187\1\215\4\u0187\3\215\1\146"+
    "\1\215\1\146\1\301\1\215\1\217\30\146\3\221\1\277"+
    "\1\221\2\u0189\1\u018a\1\302\1\u0189\7\221\3\u0189\1\221"+
    "\1\u0189\1\221\4\u0189\3\221\1\u012a\1\221\1\u01d3\1\u012a"+
    "\1\221\1\u0181\2\u012a\1\u0182\25\u012a\2\216\1\277\2\216"+
    "\2\u018b\1\u018c\1\300\1\u018b\7\216\3\u018b\1\216\1\u018b"+
    "\1\216\4\u018b\3\216\1\u0129\1\216\1\u0129\1\u01d3\1\216"+
    "\1\u017f\2\u0129\1\u0180\25\u0129\2\362\1\u0130\1\u0131\4\362"+
    "\1\u0132\1\u01d8\24\362\3\221\1\277\1\u01d9\3\221\1\302"+
    "\25\221\1\u0135\1\225\1\u0135\1\u01da\1\225\1\u018f\1\u0135"+
    "\1\u018f\1\u0190\26\u0135\1\225\1\u0134\1\u0135\1\225\2\u0135"+
    "\1\u018f\1\u0190\2\u0135\1\u01db\22\u0135\1\u0136\1\230\1\u01da"+
    "\1\u0136\1\230\1\u0191\1\u0136\1\u0191\1\u0192\26\u0136\1\230"+
    "\1\u0136\1\u0134\1\230\2\u0136\1\u0191\1\u0192\2\u0136\1\u01dc"+
    "\22\u0136\1\u0134\1\42\2\u0134\1\42\2\u0134\1\u0137\1\u0138"+
    "\1\u01dd\24\u0134\2\225\1\305\1\225\1\u01de\3\225\1\306"+
    "\25\225\3\227\1\304\1\230\2\u0195\1\u0196\1\227\1\u0195"+
    "\7\227\3\u0195\1\227\1\u0195\1\227\4\u0195\3\227\1\154"+
    "\1\227\1\307\1\154\1\227\1\231\30\154\2\224\1\304"+
    "\1\224\1\225\2\u0197\1\u0198\1\224\1\u0197\7\224\3\u0197"+
    "\1\224\1\u0197\1\224\4\u0197\3\224\1\153\1\224\1\153"+
    "\1\307\1\224\1\226\30\153\3\230\1\305\1\230\2\u0199"+
    "\1\u019a\1\310\1\u0199\7\230\3\u0199\1\230\1\u0199\1\230"+
    "\4\u0199\3\230\1\u0136\1\230\1\u01da\1\u0136\1\230\1\u0191"+
    "\2\u0136\1\u0192\25\u0136\2\225\1\305\2\225\2\u019b\1\u019c"+
    "\1\306\1\u019b\7\225\3\u019b\1\225\1\u019b\1\225\4\u019b"+
    "\3\225\1\u0135\1\225\1\u0135\1\u01da\1\225\1\u018f\2\u0135"+
    "\1\u0190\25\u0135\2\371\1\u013c\1\u013d\4\371\1\u013e\1\u01df"+
    "\24\371\3\230\1\305\1\u01e0\3\230\1\310\25\230\1\u0141"+
    "\1\234\1\u0141\1\u01e1\1\234\1\u019f\1\u0141\1\u019f\1\u01a0"+
    "\26\u0141\1\234\1\u0140\1\u0141\1\234\2\u0141\1\u019f\1\u01a0"+
    "\2\u0141\1\u01e2\22\u0141\1\u0142\1\237\1\u01e1\1\u0142\1\237"+
    "\1\u01a1\1\u0142\1\u01a1\1\u01a2\26\u0142\1\237\1\u0142\1\u0140"+
    "\1\237\2\u0142\1\u01a1\1\u01a2\2\u0142\1\u01e3\22\u0142\1\u0140"+
    "\1\44\2\u0140\1\44\2\u0140\1\u0143\1\u0144\1\u01e4\24\u0140"+
    "\2\234\1\313\1\234\1\u01e5\3\234\1\314\25\234\3\236"+
    "\1\312\1\237\2\u01a5\1\u01a6\1\236\1\u01a5\7\236\3\u01a5"+
    "\1\236\1\u01a5\1\236\4\u01a5\3\236\1\161\1\236\1\315"+
    "\1\161\1\236\1\240\30\161\2\233\1\312\1\233\1\234"+
    "\2\u01a7\1\u01a8\1\233\1\u01a7\7\233\3\u01a7\1\233\1\u01a7"+
    "\1\233\4\u01a7\3\233\1\160\1\233\1\160\1\315\1\233"+
    "\1\235\30\160\3\237\1\313\1\237\2\u01a9\1\u01aa\1\316"+
    "\1\u01a9\7\237\3\u01a9\1\237\1\u01a9\1\237\4\u01a9\3\237"+
    "\1\u0142\1\237\1\u01e1\1\u0142\1\237\1\u01a1\2\u0142\1\u01a2"+
    "\25\u0142\2\234\1\313\2\234\2\u01ab\1\u01ac\1\314\1\u01ab"+
    "\7\234\3\u01ab\1\234\1\u01ab\1\234\4\u01ab\3\234\1\u0141"+
    "\1\234\1\u0141\1\u01e1\1\234\1\u019f\2\u0141\1\u01a0\25\u0141"+
    "\2\u0100\1\u0148\1\u0149\4\u0100\1\u014a\1\u01e6\24\u0100\3\237"+
    "\1\313\1\u01e7\3\237\1\316\25\237\1\u014d\1\243\1\u014d"+
    "\1\u01e8\1\243\1\u01af\1\u014d\1\u01af\1\u01b0\26\u014d\1\243"+
    "\1\u014c\1\u014d\1\243\2\u014d\1\u01af\1\u01b0\2\u014d\1\u01e9"+
    "\22\u014d\1\u014e\1\246\1\u01e8\1\u014e\1\246\1\u01b1\1\u014e"+
    "\1\u01b1\1\u01b2\26\u014e\1\246\1\u014e\1\u014c\1\246\2\u014e"+
    "\1\u01b1\1\u01b2\2\u014e\1\u01ea\22\u014e\1\u014c\1\46\2\u014c"+
    "\1\46\2\u014c\1\u014f\1\u0150\1\u01eb\24\u014c\2\243\1\321"+
    "\1\243\1\u01ec\3\243\1\322\25\243\3\245\1\320\1\246"+
    "\2\u01b5\1\u01b6\1\245\1\u01b5\7\245\3\u01b5\1\245\1\u01b5"+
    "\1\245\4\u01b5\3\245\1\166\1\245\1\323\1\166\1\245"+
    "\1\247\30\166\2\242\1\320\1\242\1\243\2\u01b7\1\u01b8"+
    "\1\242\1\u01b7\7\242\3\u01b7\1\242\1\u01b7\1\242\4\u01b7"+
    "\3\242\1\165\1\242\1\165\1\323\1\242\1\244\30\165"+
    "\3\246\1\321\1\246\2\u01b9\1\u01ba\1\324\1\u01b9\7\246"+
    "\3\u01b9\1\246\1\u01b9\1\246\4\u01b9\3\246\1\u014e\1\246"+
    "\1\u01e8\1\u014e\1\246\1\u01b1\2\u014e\1\u01b2\25\u014e\2\243"+
    "\1\321\2\243\2\u01bb\1\u01bc\1\322\1\u01bb\7\243\3\u01bb"+
    "\1\243\1\u01bb\1\243\4\u01bb\3\243\1\u014d\1\243\1\u014d"+
    "\1\u01e8\1\243\1\u01af\2\u014d\1\u01b0\25\u014d\2\u0107\1\u0154"+
    "\1\u0155\4\u0107\1\u0156\1\u01ed\24\u0107\3\246\1\321\1\u01ee"+
    "\3\246\1\324\25\246\10\250\1\325\12\250\1\u01ef\12\250"+
    "\3\331\1\u010b\1\332\1\u01f0\1\331\1\u01f1\3\331\1\u01f2"+
    "\22\331\2\326\1\u010b\1\326\1\327\1\u01f3\1\326\1\u01f4"+
    "\3\326\1\u01f5\22\326\7\0\1\u01f6\26\0\7\175\1\u01f7"+
    "\26\175\1\u01c5\1\344\1\u0112\1\u0111\1\344\2\u01c5\1\u01f8"+
    "\1\u01f9\25\u01c5\1\u0111\1\200\1\u0110\1\u0111\1\200\2\u0111"+
    "\1\u015f\1\u0160\1\u01fa\24\u0111\1\u0112\1\203\1\u0112\1\u0110"+
    "\1\203\2\u0112\1\u0161\1\u0162\1\u01fb\24\u0112\1\u0110\1\34"+
    "\2\u0110\1\34\2\u0110\1\u0113\1\u0114\1\u0110\1\u01fc\23\u0110"+
    "\2\344\1\u0118\1\u0119\4\344\1\u011a\1\344\1\u01fd\23\344"+
    "\1\u01cc\1\353\1\u011e\1\u011d\1\353\2\u01cc\1\u01fe\1\u01ff"+
    "\25\u01cc\1\u011d\1\207\1\u011c\1\u011d\1\207\2\u011d\1\u016f"+
    "\1\u0170\1\u0200\24\u011d\1\u011e\1\212\1\u011e\1\u011c\1\212"+
    "\2\u011e\1\u0171\1\u0172\1\u0201\24\u011e\1\u011c\1\36\2\u011c"+
    "\1\36\2\u011c\1\u011f\1\u0120\3\u011c\1\u0202\21\u011c\2\353"+
    "\1\u0124\1\u0125\4\353\1\u0126\3\353\1\u0203\21\353\1\u01d3"+
    "\1\362\1\u012a\1\u0129\1\362\2\u01d3\1\u0204\1\u0205\25\u01d3"+
    "\1\u0129\1\216\1\u0128\1\u0129\1\216\2\u0129\1\u017f\1\u0180"+
    "\1\u0206\24\u0129\1\u012a\1\221\1\u012a\1\u0128\1\221\2\u012a"+
    "\1\u0181\1\u0182\1\u0207\24\u012a\1\u0128\1\40\2\u0128\1\40"+
    "\2\u0128\1\u012b\1\u012c\4\u0128\1\u0208\20\u0128\2\362\1\u0130"+
    "\1\u0131\4\362\1\u0132\4\362\1\u0209\20\362\1\u01da\1\371"+
    "\1\u0136\1\u0135\1\371\2\u01da\1\u020a\1\u020b\25\u01da\1\u0135"+
    "\1\225\1\u0134\1\u0135\1\225\2\u0135\1\u018f\1\u0190\1\u020c"+
    "\24\u0135\1\u0136\1\230\1\u0136\1\u0134\1\230\2\u0136\1\u0191"+
    "\1\u0192\1\u020d\24\u0136\1\u0134\1\42\2\u0134\1\42\2\u0134"+
    "\1\u0137\1\u0138\5\u0134\1\u020e\17\u0134\2\371\1\u013c\1\u013d"+
    "\4\371\1\u013e\5\371\1\u020f\17\371\1\u01e1\1\u0100\1\u0142"+
    "\1\u0141\1\u0100\2\u01e1\1\u0210\1\u0211\25\u01e1\1\u0141\1\234"+
    "\1\u0140\1\u0141\1\234\2\u0141\1\u019f\1\u01a0\1\u0212\24\u0141"+
    "\1\u0142\1\237\1\u0142\1\u0140\1\237\2\u0142\1\u01a1\1\u01a2"+
    "\1\u0213\24\u0142\1\u0140\1\44\2\u0140\1\44\2\u0140\1\u0143"+
    "\1\u0144\6\u0140\1\u0214\16\u0140\2\u0100\1\u0148\1\u0149\4\u0100"+
    "\1\u014a\6\u0100\1\u0215\16\u0100\1\u01e8\1\u0107\1\u014e\1\u014d"+
    "\1\u0107\2\u01e8\1\u0216\1\u0217\25\u01e8\1\u014d\1\243\1\u014c"+
    "\1\u014d\1\243\2\u014d\1\u01af\1\u01b0\1\u0218\24\u014d\1\u014e"+
    "\1\246\1\u014e\1\u014c\1\246\2\u014e\1\u01b1\1\u01b2\1\u0219"+
    "\24\u014e\1\u014c\1\46\2\u014c\1\46\2\u014c\1\u014f\1\u0150"+
    "\7\u014c\1\u021a\15\u014c\2\u0107\1\u0154\1\u0155\4\u0107\1\u0156"+
    "\7\u0107\1\u021b\15\u0107\10\250\1\325\13\250\2\u021c\10\250"+
    "\3\331\1\u010b\1\332\2\u01f0\1\u01f1\1\331\1\u01f0\1\331"+
    "\1\u01f2\5\331\3\u01f0\1\331\1\u01f0\1\331\4\u01f0\3\331"+
    "\1\253\1\331\1\u010c\1\253\1\331\1\333\30\253\3\331"+
    "\1\u010b\1\332\31\331\2\326\1\u010b\1\326\1\327\2\u01f3"+
    "\1\u01f4\1\326\1\u01f3\1\326\1\u01f5\5\326\3\u01f3\1\326"+
    "\1\u01f3\1\326\4\u01f3\3\326\1\252\1\326\1\252\1\u010c"+
    "\1\326\1\330\30\252\2\326\1\u010b\1\326\1\327\31\326"+
    "\7\0\1\u021d\35\0\1\u021e\26\0\1\u01c5\1\344\2\u01c5"+
    "\1\344\1\u01f8\1\u01c5\1\u01f8\1\u01f9\26\u01c5\1\344\1\u0112"+
    "\1\u0111\1\344\2\u01c5\1\u01f8\1\u01f9\2\u01c5\1\u021f\22\u01c5"+
    "\1\u0111\1\200\1\u0110\1\u0111\1\200\2\u0111\1\u015f\1\u0160"+
    "\1\u0111\1\u0220\23\u0111\1\u0112\1\203\1\u0112\1\u0110\1\203"+
    "\2\u0112\1\u0161\1\u0162\1\u0112\1\u0221\23\u0112\1\u0110\1\34"+
    "\2\u0110\1\u0222\2\u0110\1\u0113\1\u0114\25\u0110\2\344\1\u0118"+
    "\1\u0119\1\u0223\3\344\1\u011a\25\344\1\u01cc\1\353\2\u01cc"+
    "\1\353\1\u01fe\1\u01cc\1\u01fe\1\u01ff\26\u01cc\1\353\1\u011e"+
    "\1\u011d\1\353\2\u01cc\1\u01fe\1\u01ff\2\u01cc\1\u0224\22\u01cc"+
    "\1\u011d\1\207\1\u011c\1\u011d\1\207\2\u011d\1\u016f\1\u0170"+
    "\3\u011d\1\u0225\21\u011d\1\u011e\1\212\1\u011e\1\u011c\1\212"+
    "\2\u011e\1\u0171\1\u0172\3\u011e\1\u0226\21\u011e\1\u011c\1\36"+
    "\2\u011c\1\u0227\2\u011c\1\u011f\1\u0120\25\u011c\2\353\1\u0124"+
    "\1\u0125\1\u0228\3\353\1\u0126\25\353\1\u01d3\1\362\2\u01d3"+
    "\1\362\1\u0204\1\u01d3\1\u0204\1\u0205\26\u01d3\1\362\1\u012a"+
    "\1\u0129\1\362\2\u01d3\1\u0204\1\u0205\2\u01d3\1\u0229\22\u01d3"+
    "\1\u0129\1\216\1\u0128\1\u0129\1\216\2\u0129\1\u017f\1\u0180"+
    "\4\u0129\1\u022a\20\u0129\1\u012a\1\221\1\u012a\1\u0128\1\221"+
    "\2\u012a\1\u0181\1\u0182\4\u012a\1\u022b\20\u012a\1\u0128\1\40"+
    "\2\u0128\1\u022c\2\u0128\1\u012b\1\u012c\25\u0128\2\362\1\u0130"+
    "\1\u0131\1\u022d\3\362\1\u0132\25\362\1\u01da\1\371\2\u01da"+
    "\1\371\1\u020a\1\u01da\1\u020a\1\u020b\26\u01da\1\371\1\u0136"+
    "\1\u0135\1\371\2\u01da\1\u020a\1\u020b\2\u01da\1\u022e\22\u01da"+
    "\1\u0135\1\225\1\u0134\1\u0135\1\225\2\u0135\1\u018f\1\u0190"+
    "\5\u0135\1\u022f\17\u0135\1\u0136\1\230\1\u0136\1\u0134\1\230"+
    "\2\u0136\1\u0191\1\u0192\5\u0136\1\u0230\17\u0136\1\u0134\1\42"+
    "\2\u0134\1\u0231\2\u0134\1\u0137\1\u0138\25\u0134\2\371\1\u013c"+
    "\1\u013d\1\u0232\3\371\1\u013e\25\371\1\u01e1\1\u0100\2\u01e1"+
    "\1\u0100\1\u0210\1\u01e1\1\u0210\1\u0211\26\u01e1\1\u0100\1\u0142"+
    "\1\u0141\1\u0100\2\u01e1\1\u0210\1\u0211\2\u01e1\1\u0233\22\u01e1"+
    "\1\u0141\1\234\1\u0140\1\u0141\1\234\2\u0141\1\u019f\1\u01a0"+
    "\6\u0141\1\u0234\16\u0141\1\u0142\1\237\1\u0142\1\u0140\1\237"+
    "\2\u0142\1\u01a1\1\u01a2\6\u0142\1\u0235\16\u0142\1\u0140\1\44"+
    "\2\u0140\1\u0236\2\u0140\1\u0143\1\u0144\25\u0140\2\u0100\1\u0148"+
    "\1\u0149\1\u0237\3\u0100\1\u014a\25\u0100\1\u01e8\1\u0107\2\u01e8"+
    "\1\u0107\1\u0216\1\u01e8\1\u0216\1\u0217\26\u01e8\1\u0107\1\u014e"+
    "\1\u014d\1\u0107\2\u01e8\1\u0216\1\u0217\2\u01e8\1\u0238\22\u01e8"+
    "\1\u014d\1\243\1\u014c\1\u014d\1\243\2\u014d\1\u01af\1\u01b0"+
    "\7\u014d\1\u0239\15\u014d\1\u014e\1\246\1\u014e\1\u014c\1\246"+
    "\2\u014e\1\u01b1\1\u01b2\7\u014e\1\u023a\15\u014e\1\u014c\1\46"+
    "\2\u014c\1\u023b\2\u014c\1\u014f\1\u0150\25\u014c\2\u0107\1\u0154"+
    "\1\u0155\1\u023c\3\u0107\1\u0156\25\u0107\10\250\1\325\15\250"+
    "\2\u023d\6\250\7\0\1\u023e\35\0\1\u023f\26\0\1\u01c5"+
    "\1\344\1\u0112\1\u0111\1\344\2\u01c5\1\u01f8\1\u01f9\1\u0240"+
    "\24\u01c5\1\u0111\1\200\1\u0110\1\u0111\1\u0241\2\u0111\1\u015f"+
    "\1\u0160\25\u0111\1\u0112\1\203\1\u0112\1\u0110\1\u0242\2\u0112"+
    "\1\u0161\1\u0162\25\u0112\1\u01cc\1\353\1\u011e\1\u011d\1\353"+
    "\2\u01cc\1\u01fe\1\u01ff\1\u0243\24\u01cc\1\u011d\1\207\1\u011c"+
    "\1\u011d\1\u0244\2\u011d\1\u016f\1\u0170\25\u011d\1\u011e\1\212"+
    "\1\u011e\1\u011c\1\u0245\2\u011e\1\u0171\1\u0172\25\u011e\1\u01d3"+
    "\1\362\1\u012a\1\u0129\1\362\2\u01d3\1\u0204\1\u0205\1\u0246"+
    "\24\u01d3\1\u0129\1\216\1\u0128\1\u0129\1\u0247\2\u0129\1\u017f"+
    "\1\u0180\25\u0129\1\u012a\1\221\1\u012a\1\u0128\1\u0248\2\u012a"+
    "\1\u0181\1\u0182\25\u012a\1\u01da\1\371\1\u0136\1\u0135\1\371"+
    "\2\u01da\1\u020a\1\u020b\1\u0249\24\u01da\1\u0135\1\225\1\u0134"+
    "\1\u0135\1\u024a\2\u0135\1\u018f\1\u0190\25\u0135\1\u0136\1\230"+
    "\1\u0136\1\u0134\1\u024b\2\u0136\1\u0191\1\u0192\25\u0136\1\u01e1"+
    "\1\u0100\1\u0142\1\u0141\1\u0100\2\u01e1\1\u0210\1\u0211\1\u024c"+
    "\24\u01e1\1\u0141\1\234\1\u0140\1\u0141\1\u024d\2\u0141\1\u019f"+
    "\1\u01a0\25\u0141\1\u0142\1\237\1\u0142\1\u0140\1\u024e\2\u0142"+
    "\1\u01a1\1\u01a2\25\u0142\1\u01e8\1\u0107\1\u014e\1\u014d\1\u0107"+
    "\2\u01e8\1\u0216\1\u0217\1\u024f\24\u01e8\1\u014d\1\243\1\u014c"+
    "\1\u014d\1\u0250\2\u014d\1\u01af\1\u01b0\25\u014d\1\u014e\1\246"+
    "\1\u014e\1\u014c\1\u0251\2\u014e\1\u01b1\1\u01b2\25\u014e\10\250"+
    "\1\325\13\250\2\u0252\10\250\7\0\1\u0253\26\0\1\u01c5"+
    "\1\344\1\u0112\1\u0111\1\344\2\u01c5\1\u01f8\1\u01f9\1\u01c5"+
    "\1\u0254\23\u01c5\1\u01cc\1\353\1\u011e\1\u011d\1\353\2\u01cc"+
    "\1\u01fe\1\u01ff\3\u01cc\1\u0255\21\u01cc\1\u01d3\1\362\1\u012a"+
    "\1\u0129\1\362\2\u01d3\1\u0204\1\u0205\4\u01d3\1\u0256\20\u01d3"+
    "\1\u01da\1\371\1\u0136\1\u0135\1\371\2\u01da\1\u020a\1\u020b"+
    "\5\u01da\1\u0257\17\u01da\1\u01e1\1\u0100\1\u0142\1\u0141\1\u0100"+
    "\2\u01e1\1\u0210\1\u0211\6\u01e1\1\u0258\16\u01e1\1\u01e8\1\u0107"+
    "\1\u014e\1\u014d\1\u0107\2\u01e8\1\u0216\1\u0217\7\u01e8\1\u0259"+
    "\15\u01e8\4\250\1\u025a\3\250\1\325\25\250\7\0\1\u025b"+
    "\26\0\1\u01c5\1\344\1\u0112\1\u0111\1\u025c\2\u01c5\1\u01f8"+
    "\1\u01f9\25\u01c5\1\u01cc\1\353\1\u011e\1\u011d\1\u025d\2\u01cc"+
    "\1\u01fe\1\u01ff\25\u01cc\1\u01d3\1\362\1\u012a\1\u0129\1\u025e"+
    "\2\u01d3\1\u0204\1\u0205\25\u01d3\1\u01da\1\371\1\u0136\1\u0135"+
    "\1\u025f\2\u01da\1\u020a\1\u020b\25\u01da\1\u01e1\1\u0100\1\u0142"+
    "\1\u0141\1\u0260\2\u01e1\1\u0210\1\u0211\25\u01e1\1\u01e8\1\u0107"+
    "\1\u014e\1\u014d\1\u0261\2\u01e8\1\u0216\1\u0217\25\u01e8\7\0"+
    "\1\u0262\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16500];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\20\0\1\11\43\0\1\11\3\0"+
    "\1\1\23\0\1\11\4\0\1\11\40\0\1\1\62\0"+
    "\1\1\3\0\1\11\5\0\1\11\5\0\1\11\5\0"+
    "\1\11\5\0\1\11\5\0\1\11\7\0\1\1\2\0"+
    "\1\1\1\0\1\11\1\1\57\0\1\1\114\0\1\1"+
    "\1\0\2\1\144\0\1\11\1\1\5\0\1\1\1\0"+
    "\1\1\4\0\1\1\1\0\1\1\4\0\1\1\1\0"+
    "\1\1\4\0\1\1\1\0\1\1\4\0\1\1\1\0"+
    "\1\1\4\0\1\1\1\0\1\1\7\0\2\1\45\0"+
    "\2\1\3\0\2\1\3\0\2\1\3\0\2\1\3\0"+
    "\2\1\3\0\2\1\3\0\2\1\1\0\1\11\1\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\1\6\0\1\11"+
    "\7\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[610];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JAMWikiSpliceLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JAMWikiSpliceLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return returnText(yytext());
          }
        case 17: break;
        case 2: 
          { return processHeading(1, yytext(), TAG_TYPE_WIKI_HEADING);
          }
        case 18: break;
        case 3: 
          { if (allowHTML()) {
            beginState(PRE);
        }
        return returnText(yytext());
          }
        case 19: break;
        case 4: 
          { return processHeading(2, yytext(), TAG_TYPE_WIKI_HEADING);
          }
        case 20: break;
        case 5: 
          { // state only changes to pre if allowHTML() is true, so no need to check here
        endState();
        return returnText(yytext());
          }
        case 21: break;
        case 6: 
          { return processHeading(3, yytext(), TAG_TYPE_WIKI_HEADING);
          }
        case 22: break;
        case 7: 
          { return processHeading(1, yytext(), TAG_TYPE_HTML_HEADING);
          }
        case 23: break;
        case 8: 
          { return processHeading(2, yytext(), TAG_TYPE_HTML_HEADING);
          }
        case 24: break;
        case 9: 
          { return processHeading(3, yytext(), TAG_TYPE_HTML_HEADING);
          }
        case 25: break;
        case 10: 
          { return processHeading(4, yytext(), TAG_TYPE_HTML_HEADING);
          }
        case 26: break;
        case 11: 
          { return processHeading(5, yytext(), TAG_TYPE_HTML_HEADING);
          }
        case 27: break;
        case 12: 
          { return processHeading(6, yytext(), TAG_TYPE_HTML_HEADING);
          }
        case 28: break;
        case 13: 
          { return processHeading(4, yytext(), TAG_TYPE_WIKI_HEADING);
          }
        case 29: break;
        case 14: 
          { return processHeading(5, yytext(), TAG_TYPE_WIKI_HEADING);
          }
        case 30: break;
        case 15: 
          { return processHeading(6, yytext(), TAG_TYPE_WIKI_HEADING);
          }
        case 31: break;
        case 16: 
          { if (logger.isTraceEnabled()) logger.trace("nowiki: " + yytext() + " (" + yystate() + ")");
        return returnText(yytext());
          }
        case 32: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
