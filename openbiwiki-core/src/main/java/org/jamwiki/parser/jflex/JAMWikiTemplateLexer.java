/* The following code was generated by JFlex 1.5.1 */

/*
 * The template processor performs initial parsing steps to replace
 * syntax that should not be saved to the database, processes templates
 * and prepares the document for further processing.
 */
package org.jamwiki.parser.jflex;

import org.apache.commons.lang3.StringUtils;
import org.jamwiki.utils.Utilities;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>jamwiki-template-processor.jflex</tt>
 */
public class JAMWikiTemplateLexer extends AbstractJAMWikiTemplateLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TEMPLATE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\1\1\36\1\0\1\36\22\0\1\26\1\30\13\0"+
    "\1\31\1\0\1\11\14\0\1\2\1\27\1\10\2\0\1\14\1\0"+
    "\1\20\1\22\1\17\1\0\1\23\1\0\1\6\1\0\1\7\1\21"+
    "\1\0\1\3\1\4\1\13\1\0\1\15\1\16\1\24\1\34\1\0"+
    "\1\5\1\0\1\25\5\0\1\12\1\0\1\14\1\0\1\20\1\22"+
    "\1\17\1\0\1\23\1\0\1\6\1\0\1\7\1\21\1\0\1\3"+
    "\1\4\1\13\1\0\1\15\1\16\1\24\1\34\1\0\1\5\1\0"+
    "\1\25\1\0\1\32\1\0\1\33\1\35\6\0\1\36\252\0\2\6"+
    "\115\0\1\16\u1ea8\0\1\36\1\36\u0100\0\1\7\uded5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\5\1\3\2\1\3\7\0\1\4\3\0\1\4"+
    "\6\0\1\5\1\6\2\0\1\5\10\0\1\4\1\6"+
    "\13\0\1\6\34\0\1\7\1\10\1\7\13\0\1\11"+
    "\24\0\1\12\1\13\24\0\1\14\22\0\1\15\10\0"+
    "\1\16\1\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\233\0\272\0\331"+
    "\0\135\0\370\0\u0117\0\135\0\u0136\0\u0155\0\u0174\0\u0193"+
    "\0\u01b2\0\u01d1\0\u01f0\0\u020f\0\u022e\0\u024d\0\u026c\0\u028b"+
    "\0\u02aa\0\u02c9\0\u02e8\0\u0307\0\u0326\0\u0345\0\u0364\0\u0383"+
    "\0\u03a2\0\u03c1\0\u03e0\0\u03ff\0\u041e\0\u043d\0\u045c\0\u047b"+
    "\0\u049a\0\u04b9\0\u04d8\0\135\0\u04f7\0\u0516\0\u0535\0\u0554"+
    "\0\u0573\0\u0592\0\u05b1\0\u05d0\0\u05ef\0\u060e\0\u062d\0\u064c"+
    "\0\135\0\u066b\0\u068a\0\u06a9\0\u06c8\0\u06e7\0\u0706\0\u0725"+
    "\0\u0744\0\u0763\0\u0782\0\u07a1\0\u07c0\0\u07df\0\u07fe\0\u081d"+
    "\0\u083c\0\u085b\0\u087a\0\u0899\0\u08b8\0\u08d7\0\u08f6\0\u0915"+
    "\0\u0934\0\u0953\0\u0972\0\u0991\0\u09b0\0\135\0\135\0\u09cf"+
    "\0\u09ee\0\u0a0d\0\u0a2c\0\u0a4b\0\u0a6a\0\u0a89\0\u0aa8\0\u0ac7"+
    "\0\u0ae6\0\u0b05\0\u0b24\0\135\0\u09cf\0\u0b43\0\u0b62\0\u0b81"+
    "\0\u0ba0\0\u0bbf\0\u0bde\0\u0bfd\0\u0c1c\0\u0c3b\0\u0c5a\0\u0c79"+
    "\0\u0c98\0\u0cb7\0\u0cd6\0\u0cf5\0\u0d14\0\u0d33\0\u0d52\0\u0d71"+
    "\0\135\0\135\0\u0d90\0\u0daf\0\u0dce\0\u0ded\0\u0e0c\0\u0e2b"+
    "\0\u0e4a\0\u0e69\0\u0e88\0\u0ea7\0\u0ec6\0\u0ee5\0\u0f04\0\u0f23"+
    "\0\u0f42\0\u0f61\0\u0f80\0\u0f9f\0\u0fbe\0\u0fdd\0\135\0\u0ffc"+
    "\0\u101b\0\u103a\0\u1059\0\u1078\0\u1097\0\u10b6\0\u10d5\0\u10f4"+
    "\0\u1113\0\u1132\0\u1151\0\u1170\0\u118f\0\u11ae\0\u11cd\0\u11ec"+
    "\0\u120b\0\135\0\u122a\0\u1249\0\u1268\0\u1287\0\u12a6\0\u12c5"+
    "\0\u12e4\0\u1303\0\135\0\135";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\4\1\5\27\4\1\6\2\4\1\7\1\0\2\4"+
    "\1\10\27\4\1\6\2\4\1\7\1\0\2\11\1\12"+
    "\27\11\1\13\1\14\2\11\43\0\1\15\1\16\1\0"+
    "\1\17\2\0\1\20\1\21\1\22\14\0\1\23\40\0"+
    "\1\24\41\0\1\25\4\0\1\15\1\16\1\0\1\17"+
    "\2\0\1\20\1\21\1\22\14\0\1\26\11\0\1\27"+
    "\1\16\1\0\1\17\2\0\1\20\1\21\56\0\1\30"+
    "\10\0\1\31\35\0\1\32\36\0\1\33\45\0\1\21"+
    "\36\0\1\34\41\0\1\35\52\0\1\36\37\0\1\37"+
    "\41\0\1\40\32\0\1\41\11\0\1\42\64\0\1\43"+
    "\11\0\1\44\1\45\51\0\1\46\35\0\1\47\21\0"+
    "\1\50\52\0\1\51\50\0\1\52\5\0\1\53\1\0"+
    "\30\53\1\54\1\0\3\53\35\0\1\55\32\0\1\56"+
    "\13\0\1\45\62\0\1\54\12\0\1\57\33\0\1\60"+
    "\60\0\1\61\32\0\1\62\21\0\1\63\42\0\1\64"+
    "\1\65\14\0\1\66\10\0\31\52\1\67\5\52\1\53"+
    "\1\0\30\53\1\0\1\70\3\53\35\0\1\71\1\0"+
    "\31\56\1\72\5\56\7\0\1\73\47\0\1\74\24\0"+
    "\1\75\64\0\1\76\15\0\1\77\23\0\2\64\1\100"+
    "\34\64\10\0\1\64\34\0\1\101\1\0\1\64\1\65"+
    "\4\0\1\102\1\0\1\103\1\104\1\105\1\0\1\106"+
    "\1\0\1\66\10\0\31\52\1\107\5\52\33\0\1\110"+
    "\3\0\31\56\1\111\5\56\6\0\1\112\51\0\1\113"+
    "\20\0\1\114\55\0\1\115\30\0\1\116\22\0\2\64"+
    "\1\100\6\64\1\117\25\64\22\0\1\120\40\0\1\121"+
    "\33\0\1\122\31\0\1\123\30\0\1\124\36\0\1\125"+
    "\30\0\10\52\1\126\20\52\1\107\5\52\33\0\1\127"+
    "\3\0\10\56\1\130\20\56\1\111\5\56\10\0\1\131"+
    "\62\0\1\132\22\0\1\133\35\0\1\134\34\0\1\135"+
    "\21\0\2\64\1\100\10\64\1\136\23\64\10\0\1\64"+
    "\1\65\14\0\1\137\1\140\34\0\1\141\25\0\1\142"+
    "\25\0\1\143\50\0\1\120\45\0\1\141\13\0\1\144"+
    "\24\0\1\145\10\0\2\131\1\146\34\131\22\0\1\147"+
    "\35\0\1\150\21\0\1\151\50\0\1\152\20\0\2\64"+
    "\1\100\12\64\1\153\21\64\6\0\1\101\1\0\1\64"+
    "\1\65\4\0\1\102\1\0\1\103\1\104\1\105\1\0"+
    "\1\106\1\0\1\137\1\140\7\0\1\154\1\0\6\154"+
    "\1\0\26\154\21\0\1\155\33\0\1\156\43\0\1\120"+
    "\13\0\2\131\1\146\6\131\1\157\25\131\17\0\1\160"+
    "\53\0\1\161\5\0\1\162\52\0\1\163\17\0\2\64"+
    "\1\100\14\64\1\164\17\64\1\154\1\0\6\154\1\64"+
    "\26\154\17\0\1\120\35\0\1\120\20\0\2\131\1\146"+
    "\1\165\33\131\10\0\1\166\50\0\1\167\35\0\1\170"+
    "\25\0\1\171\26\0\2\64\1\100\5\64\1\172\26\64"+
    "\2\131\1\146\1\131\1\173\32\131\2\166\1\174\34\166"+
    "\17\0\1\175\44\0\1\176\11\0\2\131\1\146\2\131"+
    "\1\177\31\131\2\166\1\174\6\166\1\200\25\166\10\0"+
    "\1\201\36\0\1\202\26\0\2\131\1\146\3\131\1\203"+
    "\30\131\2\166\1\174\1\204\33\166\2\201\1\205\34\201"+
    "\2\202\1\206\34\202\2\131\1\146\4\131\1\207\27\131"+
    "\2\166\1\174\1\166\1\210\32\166\2\201\1\205\6\201"+
    "\1\211\25\201\2\202\1\206\6\202\1\212\25\202\2\131"+
    "\1\146\3\131\1\213\30\131\2\166\1\174\3\166\1\214"+
    "\30\166\2\201\1\205\1\201\1\215\32\201\2\202\1\206"+
    "\3\202\1\216\30\202\2\131\1\146\5\131\1\217\26\131"+
    "\2\166\1\174\1\220\33\166\2\201\1\205\1\221\33\201"+
    "\2\202\1\206\1\222\33\202\2\166\1\174\15\166\1\223"+
    "\16\166\2\201\1\205\16\201\1\224\15\201\2\202\1\206"+
    "\15\202\1\225\16\202\2\166\1\174\16\166\1\226\15\166"+
    "\2\201\1\205\22\201\1\227\11\201\2\202\1\206\16\202"+
    "\1\230\15\202\2\166\1\174\31\166\1\231\2\166\2\201"+
    "\1\205\3\201\1\232\30\201\2\202\1\206\31\202\1\233"+
    "\2\202\2\166\1\174\17\166\1\234\14\166\2\201\1\205"+
    "\1\235\33\201\2\202\1\206\17\202\1\236\14\202\2\166"+
    "\1\174\14\166\1\237\17\166\2\201\1\205\15\201\1\240"+
    "\16\201\2\202\1\206\14\202\1\241\17\202\2\166\1\174"+
    "\5\166\1\242\26\166\2\201\1\205\16\201\1\243\15\201"+
    "\2\202\1\206\1\202\1\244\32\202\2\201\1\205\31\201"+
    "\1\245\2\201\2\202\1\206\1\246\33\202\2\201\1\205"+
    "\17\201\1\247\14\201\2\202\1\206\16\202\1\250\15\202"+
    "\2\201\1\205\14\201\1\251\17\201\2\202\1\206\22\202"+
    "\1\252\11\202\2\201\1\205\5\201\1\253\26\201\2\202"+
    "\1\206\5\202\1\254\26\202";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4898];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\2\1\1\11\7\0\1\1"+
    "\3\0\1\1\6\0\2\1\2\0\1\1\10\0\1\11"+
    "\1\1\13\0\1\11\34\0\2\11\1\1\13\0\1\11"+
    "\24\0\2\11\24\0\1\11\22\0\1\11\10\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JAMWikiTemplateLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JAMWikiTemplateLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { // no need to log this
        return yytext();
          }
        case 16: break;
        case 2: 
          { // no need to log this
        this.templateString.append(yytext());
        return "";
          }
        case 17: break;
        case 3: 
          { if (logger.isTraceEnabled()) logger.trace("templateendchar: " + yytext() + " (" + yystate() + ")");
        this.templateString.append(yytext());
        if (Utilities.findMatchingEndTag(this.templateString, 0, "{", "}") != -1) {
            endState();
            String result = this.parse(TAG_TYPE_TEMPLATE, this.templateString.toString());
            this.templateString = new StringBuilder();
            return result;
        }
        return "";
          }
        case 18: break;
        case 4: 
          { if (logger.isTraceEnabled()) logger.trace("templatestart: " + yytext() + " (" + yystate() + ")");
        if (yytext().length() == 4) {
            // push back the two extra characters
            yypushback(2);
        }
        if (!allowTemplates()) {
            return yytext();
        }
        this.templateString.append(yytext().substring(0, 2));
        if (yystate() != TEMPLATE) {
            beginState(TEMPLATE);
        }
        return "";
          }
        case 19: break;
        case 5: 
          { if (logger.isTraceEnabled()) logger.trace("paramstart: " + yytext() + " (" + yystate() + ")");
        yypushback(2);
        if (yystate() == YYINITIAL) {
            return yytext().substring(0, 1);
        } else {
            this.templateString.append(yytext().substring(0, 1));
            return "";
        }
          }
        case 20: break;
        case 6: 
          { if (logger.isTraceEnabled()) logger.trace("wikisignature: " + yytext() + " (" + yystate() + ")");
        return this.parse(TAG_TYPE_WIKI_SIGNATURE, yytext());
          }
        case 21: break;
        case 7: 
          { if (logger.isTraceEnabled()) logger.trace("htmlcomment: " + yytext() + " (" + yystate() + ")");
        // strip out the comment
        return (this.mode < JFlexParser.MODE_TEMPLATE) ? yytext() : "";
          }
        case 22: break;
        case 8: 
          { if (logger.isTraceEnabled()) logger.trace("templateparam: " + yytext() + " (" + yystate() + ")");
        return yytext();
          }
        case 23: break;
        case 9: 
          { if (logger.isTraceEnabled()) logger.trace("htmlcomment + newline: " + yytext() + " (" + yystate() + ")");
        // strip out the comment and newline
        return (this.mode < JFlexParser.MODE_TEMPLATE) ? yytext() : "";
          }
        case 24: break;
        case 10: 
          { if (logger.isTraceEnabled()) logger.trace("noparsedirective: " + yytext() + " (" + yystate() + ")");
        return this.parse(TAG_TYPE_NO_PARSE, yytext());
          }
        case 25: break;
        case 11: 
          { if (logger.isTraceEnabled()) logger.trace("htmlpre: " + yytext() + " (" + yystate() + ")");
        return yytext();
          }
        case 26: break;
        case 12: 
          { if (logger.isTraceEnabled()) logger.trace("nowiki: " + yytext() + " (" + yystate() + ")");
        return yytext();
          }
        case 27: break;
        case 13: 
          { if (logger.isTraceEnabled()) logger.trace("noinclude: " + yytext() + " (" + yystate() + ")");
        return this.parse(TAG_TYPE_NO_INCLUDE, yytext());
          }
        case 28: break;
        case 14: 
          { if (logger.isTraceEnabled()) logger.trace("onlyinclude: " + yytext() + " (" + yystate() + ")");
        return this.parse(TAG_TYPE_ONLY_INCLUDE, yytext());
          }
        case 29: break;
        case 15: 
          { if (logger.isTraceEnabled()) logger.trace("includeonly: " + yytext() + " (" + yystate() + ")");
        String parsed = this.parse(TAG_TYPE_INCLUDE_ONLY, yytext());
        if (yystate() == TEMPLATE) {
            this.templateString.append(parsed);
        }
        return (yystate() == YYINITIAL) ? parsed : "";
          }
        case 30: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                if (logger.isTraceEnabled()) logger.trace("EOF (" + yystate() + ")");
    if (StringUtils.isBlank(this.templateString)) {
        return null;
    }
    // FIXME - this leaves unparsed text
    String output = this.templateString.toString();
    this.templateString = new StringBuilder();
    return output;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
