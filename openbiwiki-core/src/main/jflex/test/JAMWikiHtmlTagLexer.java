/* The following code was generated by JFlex 1.5.1 */

/*
 * This class provides capability for parsing HTML or HTML-like tags of the form
 * <tag attribute="value">.  While it generates the HTML markup for the tag, it is
 * most useful as a tool to build an HtmlTagItem object that can then be further
 * processed.
 */
package org.jamwiki.parser.jflex;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>jamwiki-html-processor.jflex</tt>
 */
public class JAMWikiHtmlTagLexer extends AbstractJAMWikiHtmlTagLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ATTRS_ATTRIBUTE_KEY = 2;
  public static final int ATTRS_TEXTALIGN_ATTRIBUTE_KEY = 4;
  public static final int BLOCKQUOTE_ATTRIBUTE_KEY = 6;
  public static final int BR_ATTRIBUTE_KEY = 8;
  public static final int DL_ATTRIBUTE_KEY = 10;
  public static final int FONT_ATTRIBUTE_KEY = 12;
  public static final int HR_ATTRIBUTE_KEY = 14;
  public static final int HTML_ATTRIBUTE_VALUE = 16;
  public static final int HTML_CLOSE = 18;
  public static final int HTML_OPEN = 20;
  public static final int INS_DEL_ATTRIBUTE_KEY = 22;
  public static final int LI_ATTRIBUTE_KEY = 24;
  public static final int NON_HTML_ATTRIBUTE_KEY = 26;
  public static final int OL_ATTRIBUTE_KEY = 28;
  public static final int PRE_ATTRIBUTE_KEY = 30;
  public static final int SCRIPT_ATTRIBUTE_KEY = 32;
  public static final int TABLE_ATTRIBUTE_KEY = 34;
  public static final int TABLE_CAPTION_ATTRIBUTE_KEY = 36;
  public static final int TABLE_CELL_ATTRIBUTE_KEY = 38;
  public static final int TABLE_COL_ATTRIBUTE_KEY = 40;
  public static final int TABLE_ROW_ATTRIBUTE_KEY = 42;
  public static final int TABLE_SECTION_ATTRIBUTE_KEY = 44;
  public static final int UL_ATTRIBUTE_KEY = 46;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17,  2,  2, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\42\1\47\1\50\1\47\22\0\1\1\1\0\1\45"+
    "\4\0\1\46\5\0\1\35\1\0\1\44\1\35\1\33\1\33\1\33"+
    "\1\33\1\33\1\33\3\35\1\17\1\0\1\41\1\51\1\43\2\0"+
    "\1\6\1\23\1\4\1\3\1\12\1\31\1\14\1\30\1\36\1\52"+
    "\1\40\1\5\1\16\1\13\1\21\1\26\1\34\1\20\1\37\1\10"+
    "\1\24\1\27\1\25\1\15\1\11\1\32\4\0\1\35\1\0\1\6"+
    "\1\23\1\4\1\3\1\12\1\31\1\14\1\30\1\36\1\52\1\40"+
    "\1\5\1\16\1\13\1\21\1\26\1\34\1\20\1\37\1\10\1\24"+
    "\1\27\1\25\1\15\1\11\1\32\12\0\1\47\252\0\2\2\115\0"+
    "\1\7\u1ea8\0\1\47\1\47\u0100\0\1\22\uded5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\27\0\2\1\3\2\4\3\1\2\5\3\1\4\1\2"+
    "\1\0\1\5\5\3\1\2\4\3\1\6\4\7\1\10"+
    "\1\11\11\12\1\13\1\14\1\15\4\16\1\15\4\16"+
    "\3\15\3\16\2\15\3\3\1\17\1\2\5\3\1\2"+
    "\4\3\1\2\6\3\1\2\7\3\1\2\1\3\5\0"+
    "\1\17\1\0\3\3\2\0\3\3\1\17\1\3\1\0"+
    "\1\20\1\3\1\0\4\3\1\0\3\3\1\0\1\3"+
    "\1\0\1\21\4\0\2\12\5\0\3\12\2\0\1\15"+
    "\1\16\1\0\4\16\1\15\1\16\4\0\2\16\1\15"+
    "\1\16\1\0\12\16\3\3\1\0\5\3\1\0\3\3"+
    "\1\0\11\3\1\0\4\3\1\0\1\3\1\22\5\0"+
    "\2\3\1\0\5\3\1\0\1\3\1\0\1\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\1\0\1\12\3\0"+
    "\2\12\1\0\2\16\1\15\3\0\11\16\2\3\1\0"+
    "\7\3\1\0\7\3\1\0\1\3\1\0\1\3\1\0"+
    "\2\3\1\0\1\3\3\0\1\23\3\0\3\3\1\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\12\3\0\2\12"+
    "\3\16\3\0\5\16\1\3\1\0\1\3\1\0\2\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\17\1\3"+
    "\1\0\2\3\5\0\1\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\3\3\0\2\16\1\0\1\16\1\3\2\0"+
    "\2\3\1\0\2\3\1\0\4\3\6\0\1\3\1\0"+
    "\1\3\3\0\3\3\1\0\1\16\1\0\1\16\2\0"+
    "\1\3\1\0\2\3\1\0\2\3\4\0\2\24\1\0"+
    "\1\3\2\0\2\3\1\0\1\16\1\0\1\16\2\0"+
    "\2\3\1\25\4\0\2\3\2\0\2\3\1\0\1\3"+
    "\1\26\3\0\3\3\1\0\1\3\2\0\2\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[463];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2\0\u03dd"+
    "\0\u0408\0\u03dd\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df\0\u050a"+
    "\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u03dd\0\u0637"+
    "\0\u0433\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764"+
    "\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0433\0\u0637\0\u0866"+
    "\0\u0891\0\u03dd\0\u03dd\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968"+
    "\0\u0993\0\u09be\0\u09e9\0\u0a14\0\u03dd\0\u03dd\0\u0a3f\0\u0a6a"+
    "\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2"+
    "\0\u0bed\0\u0bc2\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef"+
    "\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47"+
    "\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f"+
    "\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7"+
    "\0\u1122\0\u114d\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f"+
    "\0\u0408\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u03dd\0\u1326\0\u1351"+
    "\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u1453\0\u147e\0\u050a"+
    "\0\u14a9\0\u0637\0\u03dd\0\u14d4\0\u14ff\0\u152a\0\u1555\0\u1580"+
    "\0\u15ab\0\u15d6\0\u1601\0\u162c\0\u1657\0\u1682\0\u16ad\0\u0866"+
    "\0\u03dd\0\u0891\0\u16d8\0\u1703\0\u172e\0\u1759\0\u03dd\0\u1784"+
    "\0\u17af\0\u17da\0\u1805\0\u1830\0\u185b\0\u1886\0\u18b1\0\u18dc"+
    "\0\u1907\0\u0b6c\0\u1932\0\u195d\0\u1988\0\u19b3\0\u19de\0\u1a09"+
    "\0\u03dd\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b\0\u1b36"+
    "\0\u1b61\0\u1b8c\0\u1bb7\0\u1be2\0\u1c0d\0\u1c38\0\u1c63\0\u1c8e"+
    "\0\u1cb9\0\u1ce4\0\u1d0f\0\u1d3a\0\u1d65\0\u1d90\0\u1dbb\0\u1de6"+
    "\0\u1e11\0\u1e3c\0\u1e67\0\u1e92\0\u1ebd\0\u1ee8\0\u1f13\0\u1f3e"+
    "\0\u1f69\0\u1f94\0\u1fbf\0\u1fea\0\u2015\0\u2040\0\u206b\0\u2096"+
    "\0\u20c1\0\u20ec\0\u2117\0\u2142\0\u216d\0\u2198\0\u21c3\0\u21ee"+
    "\0\u2219\0\u2244\0\u226f\0\u127a\0\u229a\0\u22c5\0\u22f0\0\u231b"+
    "\0\u2346\0\u2371\0\u239c\0\u23c7\0\u23f2\0\u241d\0\u2448\0\u2473"+
    "\0\u249e\0\u24c9\0\u24f4\0\u251f\0\u254a\0\u2575\0\u25a0\0\u25cb"+
    "\0\u25f6\0\u2621\0\u264c\0\u2677\0\u26a2\0\u26cd\0\u26f8\0\u2723"+
    "\0\u274e\0\u2779\0\u27a4\0\u27cf\0\u27fa\0\u2825\0\u2850\0\u287b"+
    "\0\u28a6\0\u28d1\0\u28fc\0\u2927\0\u2952\0\u297d\0\u29a8\0\u29d3"+
    "\0\u29fe\0\u2a29\0\u2a54\0\u2a7f\0\u2aaa\0\u2ad5\0\u2b00\0\u2b2b"+
    "\0\u2b56\0\u2b81\0\u2bac\0\u2bd7\0\u2c02\0\u2c2d\0\u2c58\0\u2c83"+
    "\0\u2cae\0\u2cd9\0\u2d04\0\u2d2f\0\u2d5a\0\u2d85\0\u2db0\0\u2ddb"+
    "\0\u2e06\0\u2e31\0\u2e5c\0\u2e87\0\u2eb2\0\u2edd\0\u2f08\0\u2f33"+
    "\0\u2f5e\0\u2f89\0\u2fb4\0\u03dd\0\u2fdf\0\u300a\0\u3035\0\u3060"+
    "\0\u308b\0\u30b6\0\u30e1\0\u310c\0\u3137\0\u3162\0\u318d\0\u31b8"+
    "\0\u31e3\0\u320e\0\u3239\0\u3264\0\u328f\0\u32ba\0\u32e5\0\u3310"+
    "\0\u333b\0\u3366\0\u3391\0\u33bc\0\u33e7\0\u3412\0\u343d\0\u3468"+
    "\0\u3493\0\u34be\0\u34e9\0\u3514\0\u353f\0\u356a\0\u3595\0\u35c0"+
    "\0\u35eb\0\u3616\0\u3641\0\u366c\0\u3697\0\u36c2\0\u36ed\0\u3718"+
    "\0\u3743\0\u376e\0\u3799\0\u37c4\0\u37ef\0\u381a\0\u3845\0\u3870"+
    "\0\u389b\0\u38c6\0\u38f1\0\u391c\0\u3947\0\u3972\0\u399d\0\u39c8"+
    "\0\u39f3\0\u3a1e\0\u3a49\0\u3a74\0\u3a9f\0\u3aca\0\u3af5\0\u3b20"+
    "\0\u3b4b\0\u3b76\0\u3ba1\0\u3bcc\0\u3bf7\0\u3c22\0\u3c4d\0\u3c78"+
    "\0\u3ca3\0\u3cce\0\u3cf9\0\u3d24\0\u3d4f\0\u3d7a\0\u3da5\0\u3dd0"+
    "\0\u3dfb\0\u3e26\0\u3e51\0\u3e7c\0\u3ea7\0\u3ed2\0\u3efd\0\u3f28"+
    "\0\u3f53\0\u3f7e\0\u3fa9\0\u3fd4\0\u3fff\0\u402a\0\u4055\0\u4080"+
    "\0\u40ab\0\u40d6\0\u4101\0\u412c\0\u4157\0\u4182\0\u41ad\0\u41d8"+
    "\0\u4203\0\u422e\0\u4259\0\u4284\0\u42af\0\u03dd\0\u050a\0\u42da"+
    "\0\u4305\0\u4330\0\u435b\0\u4386\0\u43b1\0\u43dc\0\u4407\0\u4432"+
    "\0\u445d\0\u4488\0\u44b3\0\u44de\0\u4509\0\u422e\0\u4534\0\u455f"+
    "\0\u458a\0\u45b5\0\u45e0\0\u460b\0\u4636\0\u4661\0\u468c\0\u46b7"+
    "\0\u46e2\0\u470d\0\u03dd\0\u4738\0\u4763\0\u478e\0\u47b9\0\u47e4"+
    "\0\u480f\0\u483a\0\u4865\0\u4890\0\u48bb\0\u48e6\0\u4911";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[463];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\41\30\1\31\1\0\4\30\2\0\2\30\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\4\40"+
    "\1\43\1\40\1\32\1\40\1\44\1\32\10\40\1\32"+
    "\1\40\1\32\1\45\1\46\1\40\1\32\1\0\1\47"+
    "\1\50\2\32\1\0\1\51\1\52\1\40\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\53\1\41\1\42\4\40"+
    "\1\43\1\40\1\32\1\40\1\44\1\32\10\40\1\32"+
    "\1\40\1\32\1\45\1\46\1\40\1\32\1\0\1\47"+
    "\1\50\2\32\1\0\1\51\1\52\1\40\1\32\1\33"+
    "\1\34\1\35\1\54\1\37\1\40\1\41\1\42\4\40"+
    "\1\43\1\40\1\32\1\40\1\44\1\32\10\40\1\32"+
    "\1\40\1\32\1\45\1\46\1\40\1\32\1\0\1\47"+
    "\1\50\2\32\1\0\1\51\1\52\1\40\1\32\1\33"+
    "\1\34\1\40\1\55\2\40\1\41\1\42\6\40\1\32"+
    "\2\40\1\32\10\40\1\32\1\40\1\32\1\45\1\46"+
    "\1\40\1\32\1\0\1\47\1\50\2\32\1\0\1\51"+
    "\1\52\1\40\1\32\1\33\1\34\1\35\1\56\1\37"+
    "\1\40\1\41\1\42\4\40\1\43\1\40\1\32\1\40"+
    "\1\44\1\32\10\40\1\32\1\40\1\32\1\45\1\46"+
    "\1\40\1\32\1\0\1\47\1\50\2\32\1\0\1\51"+
    "\1\52\1\40\1\32\1\33\1\34\1\35\1\57\1\37"+
    "\1\40\1\60\1\42\4\40\1\43\1\40\1\32\2\40"+
    "\1\32\6\40\1\61\1\40\1\32\1\40\1\32\1\45"+
    "\1\62\1\40\1\32\1\0\1\47\1\50\2\32\1\0"+
    "\1\51\1\52\1\40\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\53\1\60\1\42\2\40\1\63\1\40\1\43"+
    "\1\40\1\32\1\40\1\44\1\32\2\40\1\64\5\40"+
    "\1\32\1\40\1\32\1\45\1\62\1\40\1\32\1\0"+
    "\1\47\1\50\2\32\1\0\1\51\1\52\1\40\1\65"+
    "\1\66\41\65\1\47\1\67\1\70\1\71\1\65\1\51"+
    "\2\65\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\12\100\1\72\1\102\12\100\1\103\1\104\1\100"+
    "\1\72\1\0\1\105\3\72\1\0\1\73\1\72\1\100"+
    "\1\106\1\73\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\1\115\1\116\1\117\6\116\1\120\1\106\1\121\1\122"+
    "\1\116\1\123\1\124\1\125\1\126\4\116\1\127\1\130"+
    "\1\116\1\106\1\0\4\106\1\0\1\73\1\106\1\116"+
    "\1\32\1\33\1\34\1\131\1\54\1\37\1\40\1\41"+
    "\1\42\4\40\1\43\1\40\1\32\1\40\1\44\1\32"+
    "\10\40\1\32\1\40\1\32\1\45\1\46\1\40\1\32"+
    "\1\0\1\47\1\50\2\32\1\0\1\51\1\52\1\40"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\132\4\40\1\43\1\40\1\32\1\40\1\44\1\32"+
    "\4\40\1\133\3\40\1\32\1\40\1\32\1\45\1\46"+
    "\1\40\1\32\1\0\1\47\1\50\2\32\1\0\1\51"+
    "\1\52\1\40\1\32\1\33\1\32\4\134\1\32\12\134"+
    "\1\32\16\134\1\32\1\0\1\47\1\50\2\32\1\0"+
    "\1\51\1\52\1\134\1\32\1\33\1\34\1\35\1\56"+
    "\1\37\1\40\1\135\1\132\4\40\1\43\1\40\1\32"+
    "\1\40\1\44\1\32\10\40\1\32\1\40\1\32\1\45"+
    "\1\136\1\40\1\32\1\0\1\47\1\50\2\32\1\0"+
    "\1\51\1\52\1\40\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\4\40\1\137\1\40\1\32"+
    "\1\40\1\44\1\32\2\40\1\64\5\40\1\32\1\40"+
    "\1\32\1\45\1\46\1\40\1\32\1\0\1\47\1\50"+
    "\2\32\1\0\1\51\1\52\1\40\1\32\1\33\1\34"+
    "\1\140\1\141\1\142\1\40\1\143\1\144\4\40\1\145"+
    "\1\40\1\32\2\40\1\32\10\40\1\32\1\40\1\32"+
    "\1\45\1\146\1\40\1\32\1\0\1\47\1\50\2\32"+
    "\1\0\1\51\1\52\1\40\1\32\1\33\1\34\1\35"+
    "\1\147\1\37\1\53\1\150\1\42\4\40\1\43\1\40"+
    "\1\32\1\151\1\44\1\32\1\152\1\40\1\64\3\40"+
    "\1\153\1\40\1\32\1\40\1\32\1\45\1\154\1\40"+
    "\1\32\1\0\1\47\1\50\2\32\1\0\1\51\1\52"+
    "\1\40\1\32\1\33\1\34\1\35\1\155\1\37\1\156"+
    "\1\157\1\42\2\40\1\160\1\40\1\43\1\40\1\32"+
    "\1\161\1\44\1\32\1\162\1\40\1\64\1\40\1\163"+
    "\1\164\2\40\1\32\1\40\1\32\1\45\1\165\1\40"+
    "\1\32\1\0\1\47\1\50\2\32\1\0\1\51\1\52"+
    "\1\40\1\32\1\33\1\34\1\35\1\166\1\37\1\53"+
    "\1\167\1\42\4\40\1\43\1\40\1\32\1\40\1\44"+
    "\1\32\2\40\1\64\1\40\1\163\3\40\1\32\1\40"+
    "\1\32\1\45\1\170\1\40\1\32\1\0\1\47\1\50"+
    "\2\32\1\0\1\51\1\52\1\40\1\32\1\33\1\34"+
    "\1\35\1\166\1\37\1\53\1\41\1\42\4\40\1\43"+
    "\1\40\1\32\1\40\1\44\1\32\1\162\3\40\1\163"+
    "\3\40\1\32\1\40\1\32\1\45\1\46\1\40\1\32"+
    "\1\0\1\47\1\50\2\32\1\0\1\51\1\52\1\40"+
    "\1\32\1\33\1\34\1\35\1\166\1\37\1\53\1\41"+
    "\1\42\4\40\1\43\1\40\1\32\1\40\1\44\1\32"+
    "\4\40\1\163\3\40\1\32\1\40\1\32\1\45\1\46"+
    "\1\40\1\32\1\0\1\47\1\50\2\32\1\0\1\51"+
    "\1\52\1\40\1\32\1\33\1\34\1\35\1\56\1\37"+
    "\1\40\1\41\1\132\4\40\1\43\1\40\1\32\1\40"+
    "\1\44\1\32\10\40\1\32\1\40\1\32\1\45\1\46"+
    "\1\40\1\32\1\0\1\47\1\50\2\32\1\0\1\51"+
    "\1\52\1\40\54\0\1\171\1\0\4\172\1\173\12\172"+
    "\1\0\14\172\1\174\1\172\3\0\1\175\3\0\1\171"+
    "\1\0\1\172\1\0\1\51\41\0\1\47\4\0\1\51"+
    "\5\0\1\176\51\0\1\177\4\40\1\0\7\40\1\0"+
    "\2\40\1\0\10\40\1\0\1\40\1\0\1\200\2\40"+
    "\11\0\1\40\3\0\2\40\1\201\1\40\1\0\7\40"+
    "\1\0\2\40\1\0\10\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\3\0\3\40\1\202\1\0\7\40\1\0"+
    "\2\40\1\0\10\40\1\0\1\40\1\0\3\40\11\0"+
    "\1\40\3\0\4\40\1\0\7\40\1\0\2\40\1\0"+
    "\10\40\1\0\1\40\1\0\3\40\11\0\1\40\10\0"+
    "\1\203\44\0\1\204\4\40\1\0\7\40\1\0\2\40"+
    "\1\0\10\40\1\0\1\40\1\0\1\205\2\40\11\0"+
    "\1\40\3\0\4\40\1\0\6\40\1\206\1\0\2\40"+
    "\1\0\10\40\1\0\1\40\1\0\3\40\11\0\1\40"+
    "\3\0\4\40\1\0\3\40\1\207\3\40\1\0\2\40"+
    "\1\0\10\40\1\0\1\40\1\0\3\40\11\0\1\40"+
    "\3\0\1\210\3\40\1\0\7\40\1\0\2\40\1\0"+
    "\10\40\1\0\1\40\1\0\3\40\11\0\1\40\3\0"+
    "\4\40\1\0\1\211\6\40\1\0\2\40\1\0\10\40"+
    "\1\0\1\40\1\0\3\40\11\0\1\40\1\0\1\212"+
    "\41\0\1\213\4\0\1\212\3\0\1\52\46\0\1\52"+
    "\5\0\2\40\1\214\1\40\1\0\7\40\1\0\2\40"+
    "\1\0\10\40\1\0\1\40\1\0\3\40\11\0\1\40"+
    "\2\0\1\215\2\40\1\201\1\40\1\0\7\40\1\0"+
    "\2\40\1\0\10\40\1\0\1\40\1\0\1\216\2\40"+
    "\11\0\1\40\3\0\2\40\1\217\1\40\1\0\7\40"+
    "\1\0\2\40\1\0\10\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\3\0\2\40\1\201\1\40\1\0\7\40"+
    "\1\0\1\40\1\220\1\0\10\40\1\0\1\40\1\0"+
    "\3\40\11\0\1\40\3\0\2\40\1\201\1\40\1\0"+
    "\7\40\1\0\1\40\1\221\1\0\10\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\2\0\1\222\5\0\1\203"+
    "\25\0\1\222\17\0\3\40\1\223\1\0\7\40\1\0"+
    "\2\40\1\0\10\40\1\0\1\40\1\0\3\40\11\0"+
    "\1\40\2\0\1\222\4\40\1\0\1\211\6\40\1\0"+
    "\2\40\1\0\10\40\1\0\1\40\1\0\1\224\2\40"+
    "\11\0\1\40\3\0\4\40\1\0\7\40\1\0\1\40"+
    "\1\225\1\0\10\40\1\0\1\40\1\0\3\40\11\0"+
    "\1\40\2\0\1\226\4\40\1\0\7\40\1\0\2\40"+
    "\1\0\10\40\1\0\1\40\1\0\1\227\2\40\11\0"+
    "\1\40\1\65\1\0\41\65\4\0\1\65\1\0\2\65"+
    "\45\230\1\231\5\230\46\232\1\231\4\232\13\0\1\233"+
    "\41\0\1\234\4\100\1\0\12\100\1\0\16\100\11\0"+
    "\1\100\2\0\1\235\3\100\1\236\1\0\12\100\1\0"+
    "\16\100\11\0\1\100\2\0\1\237\4\100\1\0\12\100"+
    "\1\0\16\100\11\0\1\100\3\0\4\100\1\0\12\100"+
    "\1\0\16\100\11\0\1\100\10\0\1\240\5\0\1\241"+
    "\5\0\1\242\1\0\1\243\26\0\1\244\2\100\1\245"+
    "\1\100\1\0\12\100\1\0\16\100\11\0\1\100\3\0"+
    "\4\100\1\0\3\100\1\246\6\100\1\0\16\100\11\0"+
    "\1\100\3\0\4\100\1\0\1\247\11\100\1\0\16\100"+
    "\11\0\1\100\13\0\1\250\41\0\1\251\1\252\1\116"+
    "\1\252\1\116\1\0\1\252\1\116\1\120\7\116\1\0"+
    "\13\116\1\253\2\116\11\0\1\116\2\0\1\254\3\116"+
    "\1\255\1\0\2\116\1\256\6\116\1\257\1\0\13\116"+
    "\1\260\2\116\11\0\1\116\2\0\1\261\4\116\1\0"+
    "\12\116\1\0\13\116\1\252\2\116\11\0\1\116\3\0"+
    "\4\116\1\0\12\116\1\0\1\262\15\116\11\0\1\116"+
    "\10\0\1\263\5\0\1\264\5\0\1\265\1\0\1\266"+
    "\27\0\1\252\2\116\1\267\1\0\1\252\7\116\1\252"+
    "\1\116\1\0\1\270\4\116\1\271\1\272\7\116\11\0"+
    "\1\116\3\0\4\116\1\0\12\116\1\0\16\116\11\0"+
    "\1\116\3\0\4\116\1\0\6\116\1\252\3\116\1\0"+
    "\16\116\11\0\1\116\3\0\2\116\1\252\1\116\1\0"+
    "\12\116\1\0\16\116\11\0\1\116\2\0\1\273\2\116"+
    "\1\274\1\116\1\0\10\116\1\252\1\116\1\0\13\116"+
    "\1\275\2\116\11\0\1\116\3\0\4\116\1\0\10\116"+
    "\1\276\1\116\1\0\16\116\11\0\1\116\3\0\3\116"+
    "\1\277\1\0\12\116\1\0\16\116\11\0\1\116\3\0"+
    "\4\116\1\0\10\116\1\252\1\116\1\0\10\116\1\252"+
    "\5\116\11\0\1\116\3\0\4\116\1\0\11\116\1\300"+
    "\1\0\16\116\11\0\1\116\3\0\4\116\1\0\3\116"+
    "\1\301\6\116\1\0\16\116\11\0\1\116\3\0\4\116"+
    "\1\0\1\302\5\116\1\303\3\116\1\0\1\116\1\304"+
    "\1\116\1\305\12\116\11\0\1\116\2\0\1\177\3\40"+
    "\1\306\1\0\7\40\1\0\2\40\1\0\10\40\1\0"+
    "\1\40\1\0\1\200\2\40\11\0\1\40\2\0\1\204"+
    "\4\40\1\0\1\40\1\307\5\40\1\0\2\40\1\0"+
    "\10\40\1\0\1\40\1\0\1\205\2\40\11\0\1\40"+
    "\3\0\3\40\1\310\1\0\7\40\1\0\2\40\1\0"+
    "\10\40\1\0\1\40\1\0\3\40\11\0\1\40\3\0"+
    "\4\134\1\0\12\134\1\0\16\134\11\0\1\134\10\0"+
    "\1\311\45\0\4\40\1\0\1\312\6\40\1\0\2\40"+
    "\1\0\10\40\1\0\1\40\1\0\3\40\11\0\1\40"+
    "\3\0\4\40\1\0\6\40\1\313\1\0\2\40\1\0"+
    "\10\40\1\0\1\40\1\0\3\40\11\0\1\40\3\0"+
    "\4\40\1\0\2\40\1\314\4\40\1\0\2\40\1\0"+
    "\10\40\1\0\1\40\1\0\3\40\11\0\1\40\3\0"+
    "\4\40\1\0\7\40\1\0\2\40\1\0\5\40\1\315"+
    "\2\40\1\0\1\40\1\0\3\40\11\0\1\40\3\0"+
    "\3\40\1\316\1\0\7\40\1\0\2\40\1\0\10\40"+
    "\1\0\1\40\1\0\3\40\11\0\1\40\20\0\1\317"+
    "\35\0\4\40\1\0\1\40\1\307\5\40\1\0\2\40"+
    "\1\0\10\40\1\0\1\40\1\0\3\40\11\0\1\40"+
    "\3\0\4\40\1\0\6\40\1\320\1\0\2\40\1\0"+
    "\10\40\1\0\1\40\1\0\3\40\11\0\1\40\3\0"+
    "\4\40\1\0\7\40\1\0\1\321\1\40\1\0\10\40"+
    "\1\0\1\40\1\0\3\40\11\0\1\40\3\0\2\40"+
    "\1\201\1\40\1\0\2\40\1\322\4\40\1\0\2\40"+
    "\1\0\10\40\1\0\1\40\1\0\3\40\11\0\1\40"+
    "\10\0\1\203\13\0\1\323\31\0\4\40\1\0\7\40"+
    "\1\0\2\40\1\0\1\40\1\324\6\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\3\0\4\40\1\0\4\40"+
    "\1\325\2\40\1\0\1\40\1\326\1\0\10\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\3\0\4\40\1\0"+
    "\7\40\1\0\1\327\1\40\1\0\10\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\3\0\4\40\1\0\1\211"+
    "\6\40\1\0\2\40\1\0\1\40\1\330\6\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\3\0\2\40\1\201"+
    "\1\40\1\0\7\40\1\0\1\40\1\331\1\0\5\40"+
    "\1\332\2\40\1\0\1\40\1\0\3\40\11\0\1\40"+
    "\3\0\2\40\1\214\1\40\1\0\5\40\1\333\1\40"+
    "\1\0\2\40\1\0\1\334\7\40\1\0\1\40\1\0"+
    "\3\40\11\0\1\40\4\0\1\335\3\0\1\203\45\0"+
    "\4\40\1\0\7\40\1\0\1\40\1\336\1\0\10\40"+
    "\1\0\1\40\1\0\3\40\11\0\1\40\3\0\4\40"+
    "\1\0\7\40\1\0\1\40\1\337\1\0\10\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\3\0\4\40\1\0"+
    "\4\40\1\325\2\40\1\0\2\40\1\0\10\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\3\0\3\40\1\53"+
    "\1\0\7\40\1\0\2\40\1\0\10\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\3\0\4\40\1\0\2\40"+
    "\1\340\4\40\1\0\2\40\1\0\10\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\3\0\1\40\1\341\2\40"+
    "\1\0\1\211\6\40\1\0\2\40\1\0\10\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\3\0\2\40\1\201"+
    "\1\40\1\0\7\40\1\0\2\40\1\0\5\40\1\332"+
    "\2\40\1\0\1\40\1\0\3\40\11\0\1\40\10\0"+
    "\1\203\15\0\1\342\27\0\4\40\1\0\1\211\6\40"+
    "\1\0\2\40\1\0\3\40\1\343\4\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\42\172\1\0\1\344\7\172"+
    "\4\0\1\345\46\0\4\172\1\346\35\172\1\0\1\344"+
    "\7\172\1\0\1\175\1\0\4\347\1\350\12\347\1\0"+
    "\14\347\1\351\1\347\7\0\1\175\1\0\1\347\20\0"+
    "\1\176\35\0\4\40\1\0\7\40\1\0\1\210\1\40"+
    "\1\0\10\40\1\0\1\40\1\0\3\40\11\0\1\40"+
    "\3\0\3\40\1\352\1\0\7\40\1\0\2\40\1\0"+
    "\10\40\1\0\1\40\1\0\3\40\11\0\1\40\3\0"+
    "\4\40\1\0\3\40\1\353\3\40\1\0\2\40\1\0"+
    "\10\40\1\0\1\40\1\0\3\40\11\0\1\40\11\0"+
    "\1\354\51\0\1\354\45\0\4\40\1\0\1\355\6\40"+
    "\1\0\2\40\1\0\10\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\3\0\2\40\1\356\1\40\1\0\7\40"+
    "\1\0\2\40\1\0\10\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\3\0\1\357\1\360\2\40\1\0\6\40"+
    "\1\361\1\0\2\40\1\362\10\40\1\0\1\40\1\0"+
    "\2\40\1\363\11\0\1\40\3\0\4\40\1\0\1\40"+
    "\1\355\5\40\1\0\2\40\1\0\10\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\2\0\1\364\4\40\1\0"+
    "\7\40\1\0\2\40\1\0\10\40\1\0\1\40\1\0"+
    "\1\365\2\40\11\0\1\40\10\0\1\366\45\0\4\40"+
    "\1\0\1\367\6\40\1\0\2\40\1\0\10\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\3\0\3\40\1\352"+
    "\1\0\2\40\1\370\4\40\1\0\2\40\1\0\10\40"+
    "\1\0\1\40\1\0\3\40\11\0\1\40\3\0\4\40"+
    "\1\0\6\40\1\371\1\0\2\40\1\0\10\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\3\0\2\40\1\372"+
    "\1\40\1\0\7\40\1\0\2\40\1\0\10\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\32\0\1\366\23\0"+
    "\1\40\1\367\2\40\1\0\7\40\1\0\2\40\1\0"+
    "\10\40\1\0\1\40\1\0\3\40\11\0\1\40\3\0"+
    "\4\40\1\0\7\40\1\0\2\40\1\0\7\40\1\367"+
    "\1\0\1\40\1\0\3\40\11\0\1\40\3\0\4\40"+
    "\1\373\7\40\1\0\2\40\1\0\10\40\1\0\1\40"+
    "\1\0\1\40\1\374\1\40\11\0\1\40\3\0\1\375"+
    "\52\0\1\376\3\40\1\0\7\40\1\0\2\40\1\0"+
    "\10\40\1\0\1\40\1\0\3\40\11\0\1\40\7\0"+
    "\1\237\27\0\1\237\42\0\1\237\33\0\1\377\45\0"+
    "\4\100\1\0\12\100\1\0\3\100\1\u0100\12\100\11\0"+
    "\1\100\20\0\1\u0101\40\0\1\u0102\67\0\1\237\2\0"+
    "\1\237\32\0\1\u0103\60\0\1\237\41\0\4\100\1\0"+
    "\11\100\1\u0104\1\0\16\100\11\0\1\100\3\0\4\100"+
    "\1\237\12\100\1\0\16\100\11\0\1\100\3\0\4\100"+
    "\1\0\10\100\1\u0105\1\100\1\0\16\100\11\0\1\100"+
    "\7\0\1\261\27\0\1\261\42\0\1\261\26\0\4\116"+
    "\1\0\12\116\1\0\4\116\1\252\11\116\11\0\1\116"+
    "\10\0\1\u0106\45\0\4\116\1\0\12\116\1\0\3\116"+
    "\1\u0107\12\116\11\0\1\116\3\0\4\116\1\0\3\116"+
    "\1\u0108\6\116\1\0\16\116\11\0\1\116\3\0\1\276"+
    "\1\116\1\u0109\1\116\1\0\12\116\1\0\16\116\11\0"+
    "\1\116\3\0\4\116\1\0\1\276\11\116\1\0\16\116"+
    "\11\0\1\116\3\0\4\116\1\0\12\116\1\0\1\277"+
    "\15\116\11\0\1\116\20\0\1\u010a\40\0\1\u010b\67\0"+
    "\1\261\2\0\1\261\32\0\1\u010c\47\0\4\116\1\0"+
    "\12\116\1\0\1\u010d\15\116\11\0\1\116\3\0\4\116"+
    "\1\0\11\116\1\u010e\1\0\16\116\11\0\1\116\3\0"+
    "\4\116\1\0\2\116\1\u010f\7\116\1\0\16\116\11\0"+
    "\1\116\3\0\4\116\1\0\11\116\1\u0110\1\0\16\116"+
    "\11\0\1\116\14\0\1\261\41\0\4\116\1\0\11\116"+
    "\1\u0111\1\0\16\116\11\0\1\116\3\0\4\116\1\0"+
    "\4\116\1\252\5\116\1\0\16\116\11\0\1\116\3\0"+
    "\4\116\1\0\2\116\1\252\7\116\1\0\16\116\11\0"+
    "\1\116\3\0\4\116\1\0\10\116\1\252\1\116\1\0"+
    "\16\116\11\0\1\116\3\0\4\116\1\0\3\116\1\u0112"+
    "\6\116\1\0\16\116\11\0\1\116\3\0\4\116\1\261"+
    "\12\116\1\0\14\116\1\252\1\116\11\0\1\116\3\0"+
    "\4\116\1\0\10\116\1\u0113\1\116\1\0\16\116\11\0"+
    "\1\116\3\0\3\116\1\u0114\1\0\12\116\1\0\16\116"+
    "\11\0\1\116\3\0\4\116\1\0\12\116\1\0\1\252"+
    "\2\116\1\252\12\116\11\0\1\116\3\0\3\116\1\u0115"+
    "\1\0\12\116\1\0\16\116\11\0\1\116\3\0\4\40"+
    "\1\0\1\u0116\6\40\1\0\2\40\1\0\10\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\3\0\4\40\1\0"+
    "\7\40\1\0\2\40\1\0\3\40\1\367\4\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\3\0\2\40\1\u0117"+
    "\1\40\1\0\7\40\1\0\2\40\1\0\10\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\6\0\1\u0118\2\0"+
    "\1\354\44\0\3\40\1\u0119\1\0\1\40\1\355\5\40"+
    "\1\0\2\40\1\0\10\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\3\0\2\40\1\u011a\1\40\1\0\7\40"+
    "\1\0\2\40\1\0\10\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\3\0\4\40\1\0\7\40\1\0\2\40"+
    "\1\0\6\40\1\u011b\1\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\3\0\3\40\1\u011c\1\0\7\40\1\0"+
    "\2\40\1\0\10\40\1\0\1\40\1\0\3\40\11\0"+
    "\1\40\3\0\4\40\1\0\3\40\1\u011d\3\40\1\0"+
    "\2\40\1\0\10\40\1\0\1\40\1\0\3\40\11\0"+
    "\1\40\4\0\1\176\51\0\2\40\1\u011e\1\40\1\0"+
    "\7\40\1\0\2\40\1\0\10\40\1\0\1\40\1\0"+
    "\3\40\11\0\1\40\3\0\1\40\1\210\2\40\1\0"+
    "\7\40\1\0\2\40\1\0\10\40\1\0\1\40\1\0"+
    "\3\40\11\0\1\40\3\0\2\40\1\u011f\1\40\1\0"+
    "\7\40\1\0\2\40\1\0\10\40\1\0\1\40\1\0"+
    "\3\40\11\0\1\40\16\0\1\u0120\37\0\2\40\1\u0121"+
    "\1\40\1\0\7\40\1\0\2\40\1\0\10\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\3\0\1\40\1\u0122"+
    "\2\40\1\0\7\40\1\0\2\40\1\0\10\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\3\0\4\40\1\0"+
    "\7\40\1\0\1\u0123\1\40\1\0\10\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\3\0\3\40\1\u0124\1\0"+
    "\7\40\1\0\2\40\1\0\10\40\1\0\1\40\1\0"+
    "\3\40\11\0\1\40\3\0\4\40\1\0\6\40\1\u0125"+
    "\1\0\2\40\1\0\10\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\3\0\2\40\1\u0126\1\40\1\0\7\40"+
    "\1\0\2\40\1\0\10\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\3\0\3\40\1\u0127\1\0\7\40\1\0"+
    "\2\40\1\0\10\40\1\0\1\40\1\0\3\40\11\0"+
    "\1\40\2\0\1\u0128\4\40\1\0\7\40\1\0\2\40"+
    "\1\0\10\40\1\0\1\40\1\0\1\u0129\2\40\11\0"+
    "\1\40\3\0\4\40\1\0\7\40\1\0\2\40\1\0"+
    "\1\200\7\40\1\0\1\40\1\0\3\40\11\0\1\40"+
    "\21\0\1\u012a\34\0\4\40\1\0\7\40\1\0\2\40"+
    "\1\0\2\40\1\u012b\5\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\3\0\4\40\1\0\7\40\1\0\2\40"+
    "\1\0\2\40\1\u0126\5\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\2\0\1\u012c\3\40\1\u012d\1\0\7\40"+
    "\1\0\2\40\1\0\10\40\1\0\1\40\1\0\1\u012e"+
    "\2\40\11\0\1\40\3\0\4\40\1\0\7\40\1\0"+
    "\1\40\1\307\1\0\10\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\6\0\1\u012f\47\0\3\40\1\u0130\1\0"+
    "\7\40\1\0\2\40\1\0\10\40\1\0\1\40\1\0"+
    "\3\40\11\0\1\40\20\0\1\u0131\32\0\20\172\1\u0132"+
    "\21\172\1\0\1\344\7\172\1\0\1\u0133\1\0\4\347"+
    "\1\0\12\347\1\0\16\347\2\0\1\u0134\4\0\1\u0133"+
    "\1\0\1\347\4\0\1\u0135\47\0\1\u0133\1\0\1\347"+
    "\1\u0136\2\347\1\0\12\347\1\0\16\347\2\0\1\u0134"+
    "\4\0\1\u0133\1\0\1\347\3\0\4\40\1\u0128\7\40"+
    "\1\0\2\40\1\0\10\40\1\0\1\40\1\0\1\40"+
    "\1\u0129\1\40\11\0\1\40\3\0\4\40\1\0\4\40"+
    "\1\210\2\40\1\0\2\40\1\0\10\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\5\0\1\366\50\0\2\40"+
    "\1\367\1\40\1\0\7\40\1\0\2\40\1\0\10\40"+
    "\1\0\1\40\1\0\3\40\11\0\1\40\3\0\4\40"+
    "\1\0\7\40\1\u0137\2\40\1\0\10\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\3\0\4\40\1\0\7\40"+
    "\1\0\2\40\1\0\1\u0138\7\40\1\0\1\40\1\0"+
    "\3\40\11\0\1\40\3\0\2\40\1\u0139\1\40\1\0"+
    "\7\40\1\0\2\40\1\0\10\40\1\0\1\40\1\0"+
    "\3\40\11\0\1\40\3\0\4\40\1\0\7\40\1\0"+
    "\1\40\1\u013a\1\0\10\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\12\0\1\u013b\43\0\4\40\1\0\2\40"+
    "\1\u013c\4\40\1\0\2\40\1\0\10\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\14\0\1\u012f\41\0\4\40"+
    "\1\0\4\40\1\u0130\2\40\1\0\2\40\1\0\10\40"+
    "\1\0\1\40\1\0\3\40\11\0\1\40\12\0\1\176"+
    "\43\0\4\40\1\0\2\40\1\210\4\40\1\0\2\40"+
    "\1\0\10\40\1\0\1\40\1\0\3\40\11\0\1\40"+
    "\3\0\3\40\1\200\1\0\7\40\1\0\2\40\1\0"+
    "\10\40\1\0\1\40\1\0\3\40\11\0\1\40\3\0"+
    "\4\40\1\0\7\40\1\0\2\40\1\0\3\40\1\u013d"+
    "\4\40\1\0\1\40\1\0\3\40\11\0\1\40\3\0"+
    "\4\40\1\0\7\40\1\0\1\40\1\200\1\0\10\40"+
    "\1\0\1\40\1\0\3\40\11\0\1\40\30\0\1\u013e"+
    "\25\0\4\40\1\0\7\40\1\0\2\40\1\0\5\40"+
    "\1\u013f\2\40\1\0\1\40\1\0\3\40\11\0\1\40"+
    "\10\0\1\u0140\45\0\4\40\1\0\1\u0141\6\40\1\0"+
    "\2\40\1\0\10\40\1\0\1\40\1\0\3\40\11\0"+
    "\1\40\12\0\1\237\43\0\4\100\1\0\1\u0142\11\100"+
    "\1\0\16\100\11\0\1\100\2\0\1\u0143\16\0\1\u0144"+
    "\14\0\1\u0143\21\0\1\u0145\60\0\1\237\42\0\1\100"+
    "\1\u0146\2\100\1\0\12\100\1\0\16\100\11\0\1\100"+
    "\2\0\1\u0143\4\100\1\0\12\100\1\0\13\100\1\u0147"+
    "\2\100\11\0\1\100\12\0\1\261\43\0\4\116\1\0"+
    "\1\u0148\11\116\1\0\16\116\11\0\1\116\3\0\4\116"+
    "\1\0\1\u0149\11\116\1\0\16\116\11\0\1\116\3\0"+
    "\4\116\1\0\4\116\1\u014a\5\116\1\0\16\116\11\0"+
    "\1\116\2\0\1\u014b\16\0\1\u014c\14\0\1\u014b\21\0"+
    "\1\u014d\60\0\1\261\42\0\2\116\1\276\1\116\1\0"+
    "\12\116\1\0\16\116\11\0\1\116\3\0\1\u014e\3\116"+
    "\1\0\12\116\1\0\16\116\11\0\1\116\3\0\3\116"+
    "\1\u014f\1\0\12\116\1\0\16\116\11\0\1\116\3\0"+
    "\4\116\1\0\11\116\1\u0112\1\0\16\116\11\0\1\116"+
    "\3\0\1\116\1\u0150\2\116\1\0\12\116\1\0\16\116"+
    "\11\0\1\116\3\0\4\116\1\0\1\252\11\116\1\0"+
    "\16\116\11\0\1\116\2\0\1\u014b\4\116\1\0\11\116"+
    "\1\u0151\1\0\13\116\1\u0152\2\116\11\0\1\116\3\0"+
    "\2\116\1\120\1\116\1\0\12\116\1\0\16\116\11\0"+
    "\1\116\3\0\4\116\1\0\3\116\1\252\6\116\1\0"+
    "\16\116\11\0\1\116\3\0\4\40\1\0\2\40\1\u0153"+
    "\4\40\1\0\2\40\1\0\10\40\1\0\1\40\1\0"+
    "\3\40\11\0\1\40\3\0\4\40\1\0\7\40\1\0"+
    "\2\40\1\0\1\40\1\367\6\40\1\0\1\40\1\0"+
    "\3\40\11\0\1\40\20\0\1\u0154\35\0\4\40\1\0"+
    "\7\40\1\0\1\u0155\1\40\1\0\10\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\3\0\4\40\1\0\7\40"+
    "\1\u0156\2\40\1\0\10\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\3\0\4\40\1\0\2\40\1\200\4\40"+
    "\1\0\2\40\1\0\10\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\3\0\4\40\1\0\7\40\1\0\1\u0157"+
    "\1\40\1\0\10\40\1\0\1\40\1\0\3\40\11\0"+
    "\1\40\3\0\4\40\1\0\4\40\1\u0158\2\40\1\0"+
    "\2\40\1\0\10\40\1\0\1\40\1\0\3\40\11\0"+
    "\1\40\3\0\4\40\1\0\7\40\1\u0159\2\40\1\0"+
    "\10\40\1\0\1\40\1\0\3\40\11\0\1\40\3\0"+
    "\2\40\1\u015a\1\40\1\0\7\40\1\0\2\40\1\0"+
    "\10\40\1\0\1\40\1\0\3\40\11\0\1\40\16\0"+
    "\1\u015b\37\0\4\40\1\0\2\40\1\u0129\4\40\1\0"+
    "\2\40\1\0\10\40\1\0\1\40\1\0\3\40\11\0"+
    "\1\40\3\0\4\40\1\0\7\40\1\0\1\40\1\221"+
    "\1\0\10\40\1\0\1\40\1\0\3\40\11\0\1\40"+
    "\3\0\1\u011b\3\40\1\0\7\40\1\0\2\40\1\0"+
    "\10\40\1\0\1\40\1\0\3\40\11\0\1\40\3\0"+
    "\4\40\1\0\6\40\1\367\1\0\2\40\1\0\10\40"+
    "\1\0\1\40\1\0\3\40\11\0\1\40\3\0\4\40"+
    "\1\0\6\40\1\u015c\1\0\2\40\1\0\10\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\3\0\4\40\1\u015d"+
    "\7\40\1\0\2\40\1\0\10\40\1\0\1\40\1\0"+
    "\1\40\1\u015e\1\40\11\0\1\40\3\0\4\40\1\0"+
    "\7\40\1\0\1\u015f\1\40\1\0\10\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\7\0\1\176\27\0\1\176"+
    "\16\0\4\40\1\176\7\40\1\0\2\40\1\0\10\40"+
    "\1\0\1\40\1\0\1\40\1\210\1\40\11\0\1\40"+
    "\26\0\1\366\27\0\4\40\1\0\7\40\1\0\1\u0160"+
    "\1\40\1\0\10\40\1\0\1\40\1\0\3\40\11\0"+
    "\1\40\14\0\1\u0161\41\0\1\u0162\3\40\1\0\7\40"+
    "\1\0\2\40\1\0\10\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\3\0\4\40\1\0\4\40\1\u0163\2\40"+
    "\1\0\2\40\1\0\10\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\13\0\1\176\42\0\4\40\1\0\3\40"+
    "\1\210\3\40\1\0\2\40\1\0\10\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\2\0\1\u0164\33\0\1\u0164"+
    "\14\0\2\172\1\u0165\33\172\1\u0165\3\172\1\0\1\344"+
    "\7\172\1\0\1\u0133\41\0\1\u0134\4\0\1\u0133\22\0"+
    "\1\u0166\33\0\1\u0133\1\0\4\347\1\0\10\347\1\u0167"+
    "\1\347\1\0\16\347\2\0\1\u0134\4\0\1\u0133\1\0"+
    "\1\347\5\0\1\u0168\50\0\2\40\1\u0169\1\40\1\0"+
    "\7\40\1\0\2\40\1\0\10\40\1\0\1\40\1\0"+
    "\3\40\11\0\1\40\2\0\1\u016a\4\40\1\0\7\40"+
    "\1\0\2\40\1\0\10\40\1\0\1\40\1\0\1\u016b"+
    "\2\40\11\0\1\40\3\0\4\40\1\0\7\40\1\0"+
    "\2\40\1\0\1\40\1\u016c\6\40\1\0\1\40\1\0"+
    "\3\40\11\0\1\40\11\0\1\u016d\44\0\4\40\1\0"+
    "\1\40\1\u016e\5\40\1\0\2\40\1\0\10\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\3\0\3\40\1\u016f"+
    "\1\0\7\40\1\0\2\40\1\0\10\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\6\0\1\u0170\47\0\3\40"+
    "\1\u0171\1\0\7\40\1\0\2\40\1\0\10\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\30\0\1\176\25\0"+
    "\4\40\1\0\7\40\1\0\2\40\1\0\5\40\1\210"+
    "\2\40\1\0\1\40\1\0\3\40\11\0\1\40\2\0"+
    "\1\u0172\4\100\1\0\12\100\1\0\16\100\11\0\1\100"+
    "\22\0\1\377\15\0\1\377\25\0\1\244\44\0\1\237"+
    "\50\0\4\100\1\0\12\100\1\u0173\16\100\11\0\1\100"+
    "\3\0\4\100\1\0\12\100\1\377\16\100\11\0\1\100"+
    "\2\0\1\u0174\4\116\1\0\12\116\1\0\13\116\1\u0175"+
    "\2\116\11\0\1\116\3\0\4\116\1\0\2\116\1\277"+
    "\7\116\1\0\16\116\11\0\1\116\3\0\4\116\1\0"+
    "\10\116\1\u0176\1\116\1\0\16\116\11\0\1\116\22\0"+
    "\1\u0106\15\0\1\u0106\25\0\1\273\44\0\1\261\50\0"+
    "\4\116\1\0\1\116\1\252\10\116\1\0\16\116\11\0"+
    "\1\116\3\0\1\252\3\116\1\0\12\116\1\0\16\116"+
    "\11\0\1\116\3\0\4\116\1\0\12\116\1\u0177\15\116"+
    "\1\u0178\11\0\1\116\3\0\4\116\1\0\3\116\1\275"+
    "\6\116\1\0\16\116\11\0\1\116\3\0\4\116\1\0"+
    "\12\116\1\u0106\15\116\1\276\11\0\1\116\3\0\4\40"+
    "\1\0\1\u0179\6\40\1\0\2\40\1\0\10\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\10\0\1\176\45\0"+
    "\4\40\1\0\1\210\6\40\1\0\2\40\1\0\10\40"+
    "\1\0\1\40\1\0\3\40\11\0\1\40\5\0\1\u0168"+
    "\1\0\1\u017a\27\0\1\u017a\16\0\4\40\1\u017b\7\40"+
    "\1\0\2\40\1\0\10\40\1\0\1\40\1\0\1\40"+
    "\1\u017c\1\40\11\0\1\40\3\0\4\40\1\0\7\40"+
    "\1\0\2\40\1\0\1\40\1\u017d\6\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\7\0\1\u017a\27\0\1\u017a"+
    "\16\0\4\40\1\u017e\7\40\1\0\2\40\1\0\3\40"+
    "\1\u017f\4\40\1\0\1\40\1\0\1\40\1\u0180\1\40"+
    "\11\0\1\40\6\0\1\u0181\47\0\3\40\1\u0182\1\0"+
    "\7\40\1\0\2\40\1\0\10\40\1\0\1\40\1\0"+
    "\3\40\11\0\1\40\26\0\1\342\27\0\4\40\1\0"+
    "\7\40\1\0\2\40\1\0\3\40\1\343\4\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\3\0\4\40\1\0"+
    "\7\40\1\0\1\40\1\u0183\1\0\10\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\3\0\3\40\1\u0184\1\0"+
    "\7\40\1\0\2\40\1\0\10\40\1\0\1\40\1\0"+
    "\3\40\11\0\1\40\30\0\1\u0154\25\0\4\40\1\0"+
    "\2\40\1\u0185\4\40\1\0\2\40\1\0\10\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\3\0\4\40\1\0"+
    "\7\40\1\0\2\40\1\0\5\40\1\u0155\2\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\26\0\1\u0186\24\0"+
    "\26\172\1\u0187\13\172\1\0\1\344\7\172\2\0\1\u0188"+
    "\33\0\1\u0188\15\0\1\u0133\1\u0188\4\347\1\0\12\347"+
    "\1\0\13\347\1\u0189\2\347\2\0\1\u0134\4\0\1\u0133"+
    "\1\0\1\347\6\0\1\u018a\47\0\1\40\1\360\2\40"+
    "\1\0\7\40\1\0\2\40\1\0\10\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\4\0\1\u018b\51\0\1\40"+
    "\1\u018c\2\40\1\0\7\40\1\0\2\40\1\0\10\40"+
    "\1\0\1\40\1\0\3\40\11\0\1\40\3\0\4\40"+
    "\1\u018d\7\40\1\0\2\40\1\0\10\40\1\0\1\40"+
    "\1\0\1\40\1\u018e\1\40\11\0\1\40\3\0\1\u018f"+
    "\20\0\1\u0190\1\0\1\u0191\27\0\1\u0192\3\40\1\0"+
    "\7\40\1\0\2\40\1\0\1\40\1\u0193\1\40\1\u0194"+
    "\4\40\1\0\1\40\1\0\3\40\11\0\1\40\3\0"+
    "\1\40\1\u0155\2\40\1\0\7\40\1\0\2\40\1\0"+
    "\10\40\1\0\1\40\1\0\3\40\11\0\1\40\3\0"+
    "\1\366\52\0\1\367\3\40\1\0\7\40\1\0\2\40"+
    "\1\0\10\40\1\0\1\40\1\0\3\40\11\0\1\40"+
    "\21\0\1\u0103\65\0\1\u0195\37\0\1\u010c\34\0\4\116"+
    "\1\0\11\116\1\u0115\1\0\16\116\11\0\1\116\3\0"+
    "\4\116\1\0\11\116\1\u0196\1\0\16\116\11\0\1\116"+
    "\34\0\1\u0197\21\0\4\116\1\0\12\116\1\0\11\116"+
    "\1\u0198\4\116\11\0\1\116\2\0\1\u0199\4\40\1\0"+
    "\7\40\1\0\2\40\1\0\10\40\1\0\1\40\1\0"+
    "\1\u0124\2\40\11\0\1\40\26\0\1\u019a\36\0\1\u0154"+
    "\43\0\4\40\1\0\2\40\1\u0155\4\40\1\0\2\40"+
    "\1\0\10\40\1\0\1\40\1\0\3\40\11\0\1\40"+
    "\3\0\3\40\1\u019b\1\0\7\40\1\0\2\40\1\0"+
    "\10\40\1\0\1\40\1\0\3\40\11\0\1\40\26\0"+
    "\1\u019c\27\0\3\40\1\u019d\1\0\7\40\1\0\2\40"+
    "\1\0\10\40\1\0\1\40\1\0\3\40\11\0\1\40"+
    "\3\0\4\40\1\0\7\40\1\0\2\40\1\0\3\40"+
    "\1\u019e\4\40\1\0\1\40\1\0\3\40\11\0\1\40"+
    "\20\0\1\u019f\35\0\4\40\1\0\7\40\1\0\1\u01a0"+
    "\1\40\1\0\10\40\1\0\1\40\1\0\3\40\11\0"+
    "\1\40\3\0\4\40\1\0\7\40\1\0\2\40\1\0"+
    "\6\40\1\u01a1\1\40\1\0\1\40\1\0\3\40\11\0"+
    "\1\40\3\0\4\40\1\0\7\40\1\0\2\40\1\0"+
    "\3\40\1\210\4\40\1\0\1\40\1\0\3\40\11\0"+
    "\1\40\3\0\4\40\1\0\7\40\1\0\1\u0129\1\40"+
    "\1\0\10\40\1\0\1\40\1\0\3\40\11\0\1\40"+
    "\10\0\1\u01a2\42\0\10\172\1\u01a2\31\172\1\0\1\344"+
    "\7\172\26\0\1\u01a3\25\0\1\u0133\1\0\4\347\1\0"+
    "\12\347\1\0\3\347\1\u01a4\12\347\2\0\1\u0134\4\0"+
    "\1\u0133\1\0\1\347\13\0\1\u01a5\61\0\1\u01a6\15\0"+
    "\1\u01a6\15\0\4\40\1\0\7\40\1\0\2\40\1\u01a6"+
    "\10\40\1\0\1\40\1\0\2\40\1\u01a7\11\0\1\40"+
    "\12\0\1\u01a8\43\0\4\40\1\0\2\40\1\u01a9\4\40"+
    "\1\0\2\40\1\0\10\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\21\0\1\u01aa\57\0\1\u01a6\44\0\1\u01ab"+
    "\35\0\4\40\1\0\7\40\1\0\1\40\1\u01ac\1\0"+
    "\10\40\1\0\1\40\1\0\3\40\11\0\1\40\3\0"+
    "\4\40\1\0\7\40\1\0\2\40\1\0\3\40\1\u01a7"+
    "\4\40\1\0\1\40\1\0\3\40\11\0\1\40\3\0"+
    "\4\40\1\0\7\40\1\0\1\u01ad\1\40\1\0\10\40"+
    "\1\0\1\40\1\0\3\40\11\0\1\40\24\0\1\u01ae"+
    "\31\0\4\116\1\0\12\116\1\0\1\116\1\u01af\14\116"+
    "\11\0\1\116\24\0\1\u01b0\31\0\4\116\1\0\12\116"+
    "\1\0\1\116\1\u01b1\14\116\11\0\1\116\16\0\1\366"+
    "\42\0\1\u01b2\47\0\4\40\1\0\4\40\1\367\2\40"+
    "\1\0\2\40\1\0\10\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\6\0\1\u01b3\47\0\1\u01b4\3\40\1\0"+
    "\7\40\1\0\2\40\1\0\10\40\1\0\1\40\1\0"+
    "\3\40\11\0\1\40\3\0\3\40\1\u01b5\1\0\7\40"+
    "\1\0\2\40\1\0\10\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\11\0\1\176\44\0\4\40\1\0\1\40"+
    "\1\210\5\40\1\0\2\40\1\0\10\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\3\0\4\40\1\0\7\40"+
    "\1\0\2\40\1\0\6\40\1\210\1\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\42\u01a2\1\0\1\u01b6\7\u01a2"+
    "\10\0\1\u01b7\43\0\1\u0133\1\0\4\347\1\0\1\u01b8"+
    "\11\347\1\0\16\347\2\0\1\u0134\4\0\1\u0133\1\0"+
    "\1\347\14\0\1\176\41\0\1\u018f\12\0\1\u01b9\2\0"+
    "\1\u01ba\2\0\1\u0190\31\0\1\u0192\3\40\1\0\6\40"+
    "\1\u01bb\1\0\1\40\1\u01bc\1\0\1\40\1\u0193\6\40"+
    "\1\0\1\40\1\0\3\40\11\0\1\40\25\0\1\u01bd"+
    "\37\0\1\u01be\43\0\4\40\1\0\7\40\1\0\2\40"+
    "\1\0\2\40\1\u01bf\5\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\3\0\4\40\1\0\2\40\1\u01c0\4\40"+
    "\1\0\2\40\1\0\10\40\1\0\1\40\1\0\3\40"+
    "\11\0\1\40\21\0\1\235\34\0\4\116\1\0\12\116"+
    "\1\0\3\116\1\252\12\116\11\0\1\116\21\0\1\254"+
    "\34\0\4\116\1\0\11\116\1\260\1\0\16\116\11\0"+
    "\1\116\4\0\1\366\52\0\1\u01c1\51\0\1\u01c2\3\40"+
    "\1\0\7\40\1\0\2\40\1\0\10\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\3\0\1\40\1\u01c2\2\40"+
    "\1\0\7\40\1\0\2\40\1\0\10\40\1\0\1\40"+
    "\1\0\3\40\11\0\1\40\1\0\1\u01b7\41\0\1\u01c3"+
    "\4\0\1\u01b7\3\0\1\u01b7\1\0\4\347\1\0\12\347"+
    "\1\0\16\347\2\0\1\u01c3\4\0\1\u01b7\1\0\1\347"+
    "\21\0\1\u01c4\55\0\1\u01c5\2\0\1\u01c6\26\0\4\40"+
    "\1\0\7\40\1\0\1\40\1\u01c7\1\0\10\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\3\0\4\40\1\0"+
    "\7\40\1\0\2\40\1\0\1\40\1\u01c8\2\40\1\u01c9"+
    "\3\40\1\0\1\40\1\0\3\40\11\0\1\40\13\0"+
    "\1\u01a6\46\0\1\u01ca\27\0\1\u01ca\16\0\4\40\1\0"+
    "\3\40\1\u01a7\3\40\1\0\2\40\1\0\10\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40\3\0\4\40\1\u01ca"+
    "\7\40\1\0\2\40\1\0\10\40\1\0\1\40\1\0"+
    "\1\40\1\u01cb\1\40\11\0\1\40\2\0\1\u018a\33\0"+
    "\1\u018a\16\0\1\u018a\4\40\1\0\7\40\1\0\2\40"+
    "\1\0\10\40\1\0\1\40\1\0\1\202\2\40\11\0"+
    "\1\40\27\0\1\u01cc\33\0\1\u01a6\54\0\1\u01cd\43\0"+
    "\4\40\1\0\7\40\1\0\2\40\1\0\4\40\1\u01ce"+
    "\3\40\1\0\1\40\1\0\3\40\11\0\1\40\3\0"+
    "\4\40\1\0\1\u01a7\6\40\1\0\2\40\1\0\10\40"+
    "\1\0\1\40\1\0\3\40\11\0\1\40\3\0\4\40"+
    "\1\0\2\40\1\u01cf\4\40\1\0\2\40\1\0\10\40"+
    "\1\0\1\40\1\0\3\40\11\0\1\40\7\0\1\u01a6"+
    "\27\0\1\u01a6\16\0\4\40\1\u01a6\7\40\1\0\2\40"+
    "\1\0\10\40\1\0\1\40\1\0\1\40\1\u01a7\1\40"+
    "\11\0\1\40\12\0\1\u01a6\60\0\1\u01a6\35\0\4\40"+
    "\1\0\2\40\1\u01a7\4\40\1\0\2\40\1\0\10\40"+
    "\1\0\1\40\1\0\3\40\11\0\1\40\3\0\4\40"+
    "\1\0\7\40\1\0\1\u01a7\1\40\1\0\10\40\1\0"+
    "\1\40\1\0\3\40\11\0\1\40";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18748];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\27\0\1\11\1\1\1\11\14\1\1\11\1\1\1\0"+
    "\20\1\2\11\11\1\2\11\62\1\5\0\1\11\1\0"+
    "\3\1\2\0\5\1\1\0\1\11\1\1\1\0\4\1"+
    "\1\0\3\1\1\0\1\1\1\0\1\11\4\0\1\1"+
    "\1\11\5\0\3\1\2\0\2\1\1\0\4\1\1\11"+
    "\1\1\4\0\4\1\1\0\15\1\1\0\5\1\1\0"+
    "\3\1\1\0\11\1\1\0\4\1\1\0\2\1\5\0"+
    "\2\1\1\0\5\1\1\0\1\1\1\0\1\1\1\0"+
    "\4\1\1\0\1\1\1\0\1\1\1\0\1\1\3\0"+
    "\2\1\1\0\3\1\3\0\13\1\1\0\7\1\1\0"+
    "\7\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\3\0\1\11\3\0\3\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\3\0\5\1\3\0\6\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\3\1\1\0\2\1\5\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\1\1\3\0\2\1\1\0\2\1\2\0"+
    "\2\1\1\0\2\1\1\0\4\1\6\0\1\1\1\0"+
    "\1\1\3\0\3\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\0\2\1\1\0\2\1\4\0\1\11\1\1"+
    "\1\0\1\1\2\0\2\1\1\0\1\1\1\0\1\1"+
    "\2\0\3\1\4\0\2\1\2\0\2\1\1\0\1\1"+
    "\1\11\3\0\3\1\1\0\1\1\2\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[463];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JAMWikiHtmlTagLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JAMWikiHtmlTagLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { throw new IllegalArgumentException("YYINITIAL: Invalid HTML tag: " + yytext());
          }
        case 23: break;
        case 2: 
          { // ignore whitespace and any other characters
        return "";
          }
        case 24: break;
        case 3: 
          { // invalid attribute
        return "";
          }
        case 25: break;
        case 4: 
          { boolean isFinished = ((yychar + this.yytext().length()) == this.html.length());
        if (!isFinished) {
            return "";
        }
        // tag close, done
        endState();
        return this.closeTag();
          }
        case 26: break;
        case 5: 
          { if (this.currentAttributeKey != null) {
            beginState(HTML_ATTRIBUTE_VALUE);
        }
        return "";
          }
        case 27: break;
        case 6: 
          { endState();
        if (!allowJavascript() && yytext().indexOf("javascript") != -1) {
            // potential XSS attack, drop this attribute
            this.removeAttribute(this.currentAttributeKey);
        } else {
            // add quotes
            this.addAttribute(this.currentAttributeKey, yytext());
        }
        this.currentAttributeKey = null;
        return "";
          }
        case 28: break;
        case 7: 
          { // ignore anything that doesn't match
        return "";
          }
        case 29: break;
        case 8: 
          { throw new IllegalArgumentException("HTML_CLOSE: Invalid HTML tag: " + this.html);
          }
        case 30: break;
        case 9: 
          { // ignore whitespace
        return "";
          }
        case 31: break;
        case 10: 
          { this.tagType = yytext().toLowerCase();
        if (this.tagType.equals("br") || this.tagType.equals("hr")) {
            // handle invalid tags of the form </br> or </hr>
            this.tagPattern = HtmlTagItem.Pattern.EMPTY_BODY;
        }
        return "";
          }
        case 32: break;
        case 11: 
          { endState();
        return this.closeTag();
          }
        case 33: break;
        case 12: 
          { throw new IllegalArgumentException("HTML_OPEN: Invalid HTML tag: " + this.html);
          }
        case 34: break;
        case 13: 
          { endState();
        this.tagType = yytext().toLowerCase();
        if (this.tagType.equals("div")) {
            beginState(ATTRS_TEXTALIGN_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("p")) {
            beginState(ATTRS_TEXTALIGN_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("h1") || this.tagType.equals("h2") || this.tagType.equals("h3") || this.tagType.equals("h4") || this.tagType.equals("h5") || this.tagType.equals("h6")) {
            beginState(ATTRS_TEXTALIGN_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("center")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("span")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("em")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("strong")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("code")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("var")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("cite")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("abbr")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("sub")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("sup")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("tt")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("i")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("b")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("big")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("small")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("u")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("s")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("strike")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("font")) {
            beginState(FONT_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("pre")) {
            beginState(PRE_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("br")) {
            beginState(BR_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("hr")) {
            beginState(HR_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("blockquote")) {
            beginState(BLOCKQUOTE_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("ul")) {
            beginState(UL_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("ol")) {
            beginState(OL_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("dl")) {
            beginState(DL_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("li")) {
            beginState(LI_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("dd")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("dt")) {
            beginState(ATTRS_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("table")) {
            beginState(TABLE_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("tr")) {
            beginState(TABLE_ROW_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("td")) {
            beginState(TABLE_CELL_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("th")) {
            beginState(TABLE_CELL_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("tbody")) {
            beginState(TABLE_SECTION_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("thead")) {
            beginState(TABLE_SECTION_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("tfoot")) {
            beginState(TABLE_SECTION_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("caption")) {
            beginState(TABLE_CAPTION_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("col")) {
            beginState(TABLE_COL_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("colgroup")) {
            beginState(TABLE_COL_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("del")) {
            beginState(INS_DEL_ATTRIBUTE_KEY);
        } else if (this.tagType.equals("ins")) {
            beginState(INS_DEL_ATTRIBUTE_KEY);
        } else {
            logger.info("Unknown tag type: " + this.html);
        }
        if (this.tagType.equals("br") || this.tagType.equals("col") || this.tagType.equals("hr")) {
            // these tags may not have content, so explicitly set to empty body
            this.tagPattern = HtmlTagItem.Pattern.EMPTY_BODY;
        }
        return "";
          }
        case 35: break;
        case 14: 
          { // non-HTML tag, such as <gallery>
        endState();
        this.tagType = yytext().toLowerCase();
        beginState(NON_HTML_ATTRIBUTE_KEY);
        return "";
          }
        case 36: break;
        case 15: 
          { this.initializeCurrentAttribute(yytext());
        return "";
          }
        case 37: break;
        case 16: 
          { boolean isFinished = ((yychar + this.yytext().length()) == this.html.length());
        if (!isFinished) {
            return "";
        }
        // tag close, done
        endState();
        this.tagPattern = HtmlTagItem.Pattern.EMPTY_BODY;
        return this.closeTag();
          }
        case 38: break;
        case 17: 
          { endState();
        if (!allowJavascript() && yytext().indexOf("javascript") != -1) {
            // potential XSS attack, drop this attribute
            this.removeAttribute(this.currentAttributeKey);
        } else {
            // strip the quotation marks (they will be re-added later)
            this.addAttribute(this.currentAttributeKey, yytext().substring(1, yytext().length() - 1));
        }
        this.currentAttributeKey = null;
        return "";
          }
        case 39: break;
        case 18: 
          { this.initialize(HtmlTagItem.Pattern.OPEN);
        yypushback(this.html.length() - 1);
        beginState(HTML_OPEN);
        return "";
          }
        case 40: break;
        case 19: 
          { this.initialize(HtmlTagItem.Pattern.CLOSE);
        int pos = this.html.indexOf("/");
        yypushback(this.html.length() - (pos + 1));
        beginState(HTML_CLOSE);
        return "";
          }
        case 41: break;
        case 20: 
          { if (allowJavascript()) {
            this.initializeCurrentAttribute(yytext());
        }
        return "";
          }
        case 42: break;
        case 21: 
          { this.initialize(HtmlTagItem.Pattern.OPEN);
        int pos = this.yytext().toLowerCase().indexOf("script") + "script".length();
        yypushback(this.html.length() - pos);
        beginState(SCRIPT_ATTRIBUTE_KEY);
        this.tagType = "script";
        return "";
          }
        case 43: break;
        case 22: 
          { this.initialize(HtmlTagItem.Pattern.CLOSE);
        this.tagType = "script";
        return this.closeTag();
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
